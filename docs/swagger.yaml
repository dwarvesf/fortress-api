basePath: /api/v1
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.Chapter:
    properties:
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      lead_id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  model.Country:
    properties:
      cities:
        items:
          type: string
        type: array
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  model.LikertScaleCount:
    properties:
      agree:
        type: integer
      disagree:
        type: integer
      mixed:
        type: integer
      stronglyAgree:
        type: integer
      stronglyDisagree:
        type: integer
    type: object
  model.Position:
    properties:
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  model.Role:
    properties:
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      level:
        type: integer
      name:
        type: string
      updatedAt:
        type: string
    type: object
  model.Seniority:
    properties:
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  model.Stack:
    properties:
      code:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  request.AssignMemberInput:
    properties:
      deploymentType:
        type: string
      discount:
        type: number
      employeeID:
        type: string
      isLead:
        type: boolean
      joinedDate:
        type: string
      leftDate:
        type: string
      positions:
        items:
          type: string
        type: array
      rate:
        type: number
      seniorityID:
        type: string
      status:
        type: string
    required:
    - deploymentType
    - positions
    - rate
    - seniorityID
    - status
    type: object
  request.BasicEventQuestionInput:
    properties:
      answer:
        type: string
      eventQuestionID:
        type: string
      note:
        type: string
    required:
    - eventQuestionID
    type: object
  request.CreateEmployeeInput:
    properties:
      displayName:
        type: string
      fullName:
        maxLength: 100
        type: string
      personalEmail:
        type: string
      positions:
        items:
          type: string
        type: array
      roleID:
        type: string
      salary:
        type: integer
      seniorityID:
        type: string
      status:
        type: string
      teamEmail:
        type: string
    required:
    - fullName
    - personalEmail
    - positions
    - roleID
    - salary
    - seniorityID
    - status
    - teamEmail
    type: object
  request.CreateProjectInput:
    properties:
      accountManagerID:
        type: string
      clientEmail:
        type: string
      countryID:
        type: string
      deliveryManagerID:
        type: string
      members:
        items:
          $ref: '#/definitions/request.AssignMemberInput'
        type: array
      name:
        type: string
      projectEmail:
        type: string
      startDate:
        type: string
      status:
        type: string
      type:
        type: string
    required:
    - accountManagerID
    - countryID
    - name
    - status
    type: object
  request.CreateSurveyFeedbackInput:
    properties:
      fromDate:
        type: string
      projectIDs:
        items:
          type: string
        type: array
      quarter:
        type: string
      toDate:
        type: string
      type:
        type: string
      year:
        type: integer
    required:
    - type
    type: object
  request.CreateWorkUnitBody:
    properties:
      members:
        items:
          type: string
        type: array
      name:
        type: string
      stacks:
        items:
          type: string
        type: array
      status:
        type: string
      type:
        type: string
      url:
        type: string
    required:
    - name
    - stacks
    - status
    - type
    type: object
  request.DeleteTopicReviewersBody:
    properties:
      reviewerIDs:
        items:
          type: string
        type: array
    type: object
  request.SendSurveyInput:
    properties:
      topics:
        items:
          $ref: '#/definitions/request.Survey'
        type: array
    required:
    - topics
    type: object
  request.SubmitBody:
    properties:
      answers:
        items:
          $ref: '#/definitions/request.BasicEventQuestionInput'
        type: array
      status:
        type: string
    required:
    - answers
    - status
    type: object
  request.Survey:
    properties:
      participants:
        items:
          type: string
        type: array
      topicID:
        type: string
    required:
    - participants
    - topicID
    type: object
  request.UpdateContactInfoInput:
    properties:
      accountManagerID:
        type: string
      clientEmail:
        type: string
      deliveryManagerID:
        type: string
      projectEmail:
        type: string
    required:
    - accountManagerID
    type: object
  request.UpdateEmployeeGeneralInfoInput:
    properties:
      discordID:
        type: string
      discordName:
        type: string
      email:
        type: string
      fullName:
        maxLength: 99
        type: string
      githubID:
        type: string
      lineManagerID:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      phone:
        maxLength: 12
        minLength: 10
        type: string
    required:
    - email
    - fullName
    - phone
    type: object
  request.UpdateInfoInput:
    properties:
      discordID:
        type: string
      discordName:
        type: string
      githubID:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      personalEmail:
        type: string
      phoneNumber:
        maxLength: 12
        minLength: 10
        type: string
      teamEmail:
        type: string
    required:
    - personalEmail
    - phoneNumber
    - teamEmail
    type: object
  request.UpdateMemberInput:
    properties:
      deploymentType:
        type: string
      discount:
        type: number
      employeeID:
        type: string
      isLead:
        type: boolean
      joinedDate:
        type: string
      leftDate:
        type: string
      positions:
        items:
          type: string
        type: array
      projectSlotID:
        type: string
      rate:
        type: number
      seniorityID:
        type: string
      status:
        type: string
    required:
    - deploymentType
    - positions
    - projectSlotID
    - rate
    - seniorityID
    - status
    type: object
  request.UpdatePersonalInfoInput:
    properties:
      address:
        maxLength: 200
        type: string
      dob:
        type: string
      gender:
        type: string
      personalEmail:
        type: string
    required:
    - address
    - dob
    - gender
    - personalEmail
    type: object
  request.UpdateProjectGeneralInfoInput:
    properties:
      countryID:
        type: string
      name:
        type: string
      stacks:
        items:
          type: string
        type: array
      startDate:
        type: string
    required:
    - countryID
    - name
    type: object
  request.UpdateSkillsInput:
    properties:
      chapters:
        items:
          type: string
        type: array
      leadingChapters:
        items:
          type: string
        type: array
      positions:
        items:
          type: string
        type: array
      seniority:
        type: string
      stacks:
        items:
          type: string
        type: array
    required:
    - chapters
    - positions
    - seniority
    - stacks
    type: object
  request.UpdateTopicReviewersBody:
    properties:
      reviewerIDs:
        items:
          type: string
        type: array
    type: object
  request.UpdateWorkUnitBody:
    properties:
      members:
        items:
          type: string
        type: array
      name:
        maxLength: 100
        type: string
      stacks:
        items:
          type: string
        type: array
      type:
        type: string
      url:
        type: string
    required:
    - name
    - stacks
    - type
    type: object
  request.UpdateWorkUnitInput:
    properties:
      body:
        $ref: '#/definitions/request.UpdateWorkUnitBody'
      projectID:
        type: string
      workUnitID:
        type: string
    type: object
  view.AccountRoleResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Role'
        type: array
    type: object
  view.ApiError:
    description: validation error details
    properties:
      enums:
        description: available options incase of field's payload is enums
        items:
          type: string
        type: array
      field:
        description: the field cause the error
        type: string
      msg:
        description: error message
        type: string
    type: object
  view.AuthData:
    properties:
      accessToken:
        type: string
      employee:
        $ref: '#/definitions/view.EmployeeData'
    type: object
  view.AuthUserResponse:
    properties:
      data:
        $ref: '#/definitions/view.LoggedInUserData'
    type: object
  view.BasicCountryInfo:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  view.BasicEmployeeInfo:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      fullName:
        type: string
      id:
        type: string
    type: object
  view.BasicMember:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      employeeID:
        type: string
      fullName:
        type: string
    type: object
  view.BasicProjectHeadInfo:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      employeeID:
        type: string
      fullName:
        type: string
      position:
        type: string
    type: object
  view.BasicProjectInfo:
    properties:
      id:
        type: string
      name:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  view.Chapter:
    properties:
      code:
        type: string
      id:
        type: string
      leadID:
        type: string
      name:
        type: string
    type: object
  view.ChapterResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Chapter'
        type: array
    type: object
  view.CitiesResponse:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  view.CountriesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Country'
        type: array
    type: object
  view.CreateMemberData:
    properties:
      avatar:
        type: string
      deploymentType:
        type: string
      displayName:
        type: string
      employeeID:
        type: string
      fullName:
        type: string
      isLead:
        type: boolean
      positions:
        items:
          $ref: '#/definitions/view.Position'
        type: array
      projectMemberID:
        type: string
      projectSlotID:
        type: string
      seniority:
        $ref: '#/definitions/model.Seniority'
      status:
        type: string
    type: object
  view.CreateMemberDataResponse:
    properties:
      data:
        $ref: '#/definitions/view.CreateMemberData'
    type: object
  view.CreateProjectData:
    properties:
      accountManager:
        $ref: '#/definitions/view.ProjectHead'
      clientEmail:
        type: string
      country:
        $ref: '#/definitions/view.BasicCountryInfo'
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      deliveryManager:
        $ref: '#/definitions/view.ProjectHead'
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/view.CreateMemberData'
        type: array
      name:
        type: string
      projectEmail:
        type: string
      startDate:
        type: string
      status:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  view.Domain:
    properties:
      average:
        type: number
      count:
        $ref: '#/definitions/model.LikertScaleCount'
      name:
        type: string
    type: object
  view.EmployeeContentData:
    properties:
      url:
        type: string
    type: object
  view.EmployeeContentDataResponse:
    properties:
      data:
        $ref: '#/definitions/view.EmployeeContentData'
    type: object
  view.EmployeeData:
    properties:
      address:
        type: string
      avatar:
        type: string
      birthday:
        type: string
      chapters:
        items:
          $ref: '#/definitions/view.Chapter'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      discordID:
        type: string
      discordName:
        type: string
      displayName:
        type: string
      fullName:
        description: basic info
        type: string
      gender:
        type: string
      githubID:
        type: string
      horoscope:
        type: string
      id:
        type: string
      joinedDate:
        type: string
      leftDate:
        type: string
      lineManager:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      mbti:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      personalEmail:
        type: string
      phoneNumber:
        type: string
      positions:
        items:
          $ref: '#/definitions/view.Position'
        type: array
      projects:
        items:
          $ref: '#/definitions/view.EmployeeProjectData'
        type: array
      roles:
        items:
          $ref: '#/definitions/view.Role'
        type: array
      seniority:
        $ref: '#/definitions/model.Seniority'
      stacks:
        items:
          $ref: '#/definitions/view.Stack'
        type: array
      status:
        description: working info
        type: string
      teamEmail:
        type: string
      updatedAt:
        type: string
    type: object
  view.EmployeeListDataResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/view.EmployeeData'
        type: array
    type: object
  view.EmployeeProjectData:
    properties:
      deploymentType:
        type: string
      id:
        type: string
      name:
        type: string
      positions:
        items:
          $ref: '#/definitions/view.Position'
        type: array
    type: object
  view.ErrorResponse:
    properties:
      error:
        type: string
      errors:
        items:
          $ref: '#/definitions/view.ApiError'
        type: array
    type: object
  view.FeedBackReviewDetail:
    properties:
      employee:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      project:
        $ref: '#/definitions/view.BasicProjectInfo'
      questions:
        items:
          $ref: '#/definitions/view.QuestionAnswer'
        type: array
      relationship:
        type: string
      reviewer:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      topicName:
        type: string
    type: object
  view.Feedback:
    properties:
      author:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      employeeID:
        type: string
      eventID:
        type: string
      eventReviewerID:
        type: string
      isRead:
        type: boolean
      lastUpdated:
        type: string
      projectID:
        type: string
      status:
        type: string
      subtype:
        type: string
      title:
        type: string
      topicID:
        type: string
      type:
        type: string
    type: object
  view.FeedbackCount:
    properties:
      done:
        type: integer
      sent:
        type: integer
      total:
        type: integer
    type: object
  view.FeedbackDetail:
    properties:
      answers:
        items:
          $ref: '#/definitions/view.QuestionAnswer'
        type: array
      employeeID:
        type: string
      eventID:
        type: string
      project:
        $ref: '#/definitions/view.BasicProjectInfo'
      relationship:
        type: string
      reviewer:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      status:
        type: string
      title:
        type: string
      topicID:
        type: string
    type: object
  view.FeedbackDetailResponse:
    properties:
      data:
        $ref: '#/definitions/view.FeedbackDetail'
    type: object
  view.FeedbackReviewDetailResponse:
    properties:
      data:
        $ref: '#/definitions/view.FeedBackReviewDetail'
    type: object
  view.GetQuestionResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/view.Question'
        type: array
    type: object
  view.ListFeedbackResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/view.Feedback'
        type: array
    type: object
  view.ListSurveyDetailResponse:
    properties:
      data:
        $ref: '#/definitions/view.SurveyDetail'
    type: object
  view.ListSurveyResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/view.Survey'
        type: array
    type: object
  view.ListWorkUnitResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/view.WorkUnit'
        type: array
    type: object
  view.LoggedInUserData:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      fullName:
        type: string
      id:
        type: string
      permissions:
        items:
          type: string
        type: array
      role:
        type: string
      teamEmail:
        type: string
    type: object
  view.MessageResponse:
    properties:
      message:
        type: string
    type: object
  view.MetaData:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  view.PeerReviewer:
    properties:
      eventReviewerID:
        type: string
      isForcedDone:
        type: boolean
      relationship:
        type: string
      reviewer:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      status:
        type: string
    type: object
  view.Position:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  view.PositionResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Position'
        type: array
    type: object
  view.ProfileData:
    properties:
      avatar:
        type: string
      birthday:
        type: string
      discordID:
        type: string
      discordName:
        type: string
      displayName:
        type: string
      fullName:
        type: string
      gender:
        type: string
      githubID:
        type: string
      id:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      personalEmail:
        type: string
      phoneNumber:
        type: string
      teamEmail:
        type: string
    type: object
  view.ProfileDataResponse:
    properties:
      data:
        $ref: '#/definitions/view.ProfileData'
    type: object
  view.ProjectData:
    properties:
      accountManager:
        $ref: '#/definitions/view.ProjectHead'
      allowsSendingSurvey:
        type: boolean
      clientEmail:
        type: string
      country:
        $ref: '#/definitions/view.BasicCountryInfo'
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      deliveryManager:
        $ref: '#/definitions/view.ProjectHead'
      endDate:
        type: string
      id:
        type: string
      industry:
        type: string
      members:
        items:
          $ref: '#/definitions/view.ProjectMember'
        type: array
      name:
        type: string
      projectEmail:
        type: string
      salePerson:
        $ref: '#/definitions/view.ProjectHead'
      stacks:
        items:
          $ref: '#/definitions/view.Stack'
        type: array
      startDate:
        type: string
      status:
        type: string
      technicalLeads:
        items:
          $ref: '#/definitions/view.ProjectHead'
        type: array
      type:
        type: string
      updatedAt:
        type: string
    type: object
  view.ProjectHead:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      employeeID:
        type: string
      fullName:
        type: string
    type: object
  view.ProjectListDataResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/view.ProjectData'
        type: array
    type: object
  view.ProjectMember:
    properties:
      avatar:
        type: string
      deploymentType:
        type: string
      discount:
        type: number
      displayName:
        type: string
      employeeID:
        type: string
      fullName:
        type: string
      isLead:
        type: boolean
      joinedDate:
        type: string
      leftDate:
        type: string
      positions:
        items:
          $ref: '#/definitions/view.Position'
        type: array
      projectMemberID:
        type: string
      projectSlotID:
        type: string
      rate:
        type: number
      seniority:
        $ref: '#/definitions/model.Seniority'
      status:
        type: string
    type: object
  view.ProjectMemberListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/view.ProjectMember'
        type: array
    type: object
  view.Question:
    properties:
      category:
        type: string
      content:
        type: string
      id:
        type: string
      order:
        type: integer
      subcategory:
        type: string
      type:
        type: string
    type: object
  view.QuestionAnswer:
    properties:
      answer:
        type: string
      content:
        type: string
      domain:
        type: string
      eventQuestionID:
        type: string
      note:
        type: string
      order:
        type: integer
      type:
        type: string
    type: object
  view.Role:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  view.SeniorityResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Seniority'
        type: array
    type: object
  view.Stack:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  view.StackResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/model.Chapter'
        type: array
    type: object
  view.SubmitFeedback:
    properties:
      answers:
        items:
          $ref: '#/definitions/view.QuestionAnswer'
        type: array
      employeeID:
        type: string
      eventID:
        type: string
      reviewer:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      status:
        type: string
      title:
        type: string
      topicID:
        type: string
    type: object
  view.SubmitFeedbackResponse:
    properties:
      data:
        $ref: '#/definitions/view.SubmitFeedback'
    type: object
  view.Survey:
    properties:
      count:
        $ref: '#/definitions/view.FeedbackCount'
      domains:
        items:
          $ref: '#/definitions/view.Domain'
        type: array
      endDate:
        type: string
      id:
        type: string
      startDate:
        type: string
      status:
        type: string
      subtype:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  view.SurveyDetail:
    properties:
      author:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      endDate:
        type: string
      eventID:
        type: string
      startDate:
        type: string
      status:
        type: string
      subtype:
        type: string
      title:
        type: string
      topics:
        items:
          $ref: '#/definitions/view.Topic'
        type: array
      type:
        type: string
    type: object
  view.SurveyResult:
    properties:
      agree:
        type: integer
      disagree:
        type: integer
      mixed:
        type: integer
      stronglyAgree:
        type: integer
      stronglyDisagree:
        type: integer
    type: object
  view.SurveyTopicDetail:
    properties:
      employee:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      participants:
        items:
          $ref: '#/definitions/view.PeerReviewer'
        type: array
      title:
        type: string
      topicID:
        type: string
    type: object
  view.SurveyTopicDetailResponse:
    properties:
      data:
        $ref: '#/definitions/view.SurveyTopicDetail'
    type: object
  view.Topic:
    properties:
      comments:
        type: integer
      count:
        $ref: '#/definitions/view.FeedbackCount'
      employee:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      eventID:
        type: string
      id:
        type: string
      isForcedDone:
        type: boolean
      participants:
        items:
          $ref: '#/definitions/view.BasicEmployeeInfo'
        type: array
      project:
        $ref: '#/definitions/view.BasicProjectInfo'
      result:
        $ref: '#/definitions/view.SurveyResult'
      reviewID:
        type: string
      status:
        type: string
      subtype:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  view.UpdateEmployeeStatusResponse:
    properties:
      data:
        $ref: '#/definitions/view.EmployeeData'
    type: object
  view.UpdateGeneralEmployeeResponse:
    properties:
      data:
        $ref: '#/definitions/view.UpdateGeneralInfoEmployeeData'
    type: object
  view.UpdateGeneralInfoEmployeeData:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      discordID:
        type: string
      discordName:
        type: string
      fullName:
        description: basic info
        type: string
      githubID:
        type: string
      id:
        type: string
      lineManager:
        $ref: '#/definitions/view.BasicEmployeeInfo'
      notionID:
        type: string
      notionName:
        type: string
      phoneNumber:
        type: string
      teamEmail:
        type: string
      updatedAt:
        type: string
    type: object
  view.UpdatePersonalEmployeeData:
    properties:
      address:
        type: string
      birthday:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      gender:
        type: string
      id:
        type: string
      personalEmail:
        type: string
      updatedAt:
        type: string
    type: object
  view.UpdatePersonalEmployeeResponse:
    properties:
      data:
        $ref: '#/definitions/view.UpdatePersonalEmployeeData'
    type: object
  view.UpdateProfileInfoData:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      discordID:
        type: string
      discordName:
        type: string
      githubID:
        type: string
      id:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      phoneNumber:
        type: string
      teamEmail:
        description: basic info
        type: string
      updatedAt:
        type: string
    type: object
  view.UpdateProfileInfoResponse:
    properties:
      data:
        $ref: '#/definitions/view.UpdateProfileInfoData'
    type: object
  view.UpdateProjectContactInfo:
    properties:
      clientEmail:
        type: string
      projectEmail:
        type: string
      projectHead:
        items:
          $ref: '#/definitions/view.BasicProjectHeadInfo'
        type: array
    type: object
  view.UpdateProjectContactInfoResponse:
    properties:
      data:
        $ref: '#/definitions/view.UpdateProjectContactInfo'
    type: object
  view.UpdateProjectGeneralInfo:
    properties:
      country:
        $ref: '#/definitions/view.BasicCountryInfo'
      name:
        type: string
      stacks:
        items:
          $ref: '#/definitions/model.Stack'
        type: array
      startDate:
        type: string
    type: object
  view.UpdateProjectGeneralInfoResponse:
    properties:
      data:
        $ref: '#/definitions/view.UpdateProjectGeneralInfo'
    type: object
  view.UpdateProjectStatusResponse:
    properties:
      data:
        $ref: '#/definitions/view.UpdatedProject'
    type: object
  view.UpdateSkillEmployeeData:
    properties:
      chapters:
        items:
          $ref: '#/definitions/model.Chapter'
        type: array
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: string
      positions:
        items:
          $ref: '#/definitions/model.Position'
        type: array
      seniority:
        $ref: '#/definitions/model.Seniority'
      stacks:
        items:
          $ref: '#/definitions/model.Stack'
        type: array
      updatedAt:
        type: string
    type: object
  view.UpdateSkillsEmployeeResponse:
    properties:
      data:
        $ref: '#/definitions/view.UpdateSkillEmployeeData'
    type: object
  view.UpdatedProject:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      endDate:
        type: string
      id:
        type: string
      name:
        type: string
      startDate:
        type: string
      status:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  view.WorkUnit:
    properties:
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/view.BasicMember'
        type: array
      name:
        type: string
      projectID:
        type: string
      stacks:
        items:
          $ref: '#/definitions/view.MetaData'
        type: array
      status:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  view.WorkUnitResponse:
    properties:
      data:
        $ref: '#/definitions/view.WorkUnit'
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /auth:
    post:
      consumes:
      - application/json
      description: Authorise user when login
      parameters:
      - description: Google login code
        in: body
        name: code
        required: true
        schema:
          type: string
      - description: Google redirect url
        in: body
        name: redirectUrl
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.AuthData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Authorise user when login
      tags:
      - Auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get logged-in user data
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.AuthUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get logged-in user data
      tags:
      - Auth
  /employees:
    get:
      consumes:
      - application/json
      description: Get the list of employees with pagination and workingStatus
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Working Status
        in: query
        items:
          type: string
        name: workingStatus
        type: array
      - description: Position ID
        in: query
        name: positionID
        type: string
      - description: Stack ID
        in: query
        name: stackID
        type: string
      - description: Project ID
        in: query
        name: projectID
        type: string
      - description: keyword for searching
        in: query
        name: keyword
        type: string
      - description: Preload
        in: query
        name: preload
        type: boolean
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.EmployeeListDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get the list of employees
      tags:
      - Employee
    post:
      consumes:
      - application/json
      description: Create new employee
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.CreateEmployeeInput'
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.EmployeeData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Create new employee
      tags:
      - Employee
  /employees/{id}:
    get:
      consumes:
      - application/json
      description: Get employee by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.EmployeeData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get employee by id
      tags:
      - Employee
  /employees/{id}/employee-status:
    put:
      consumes:
      - application/json
      description: Update account status by employee id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Status
        in: body
        name: employeeStatus
        required: true
        schema:
          description: working info
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.UpdateEmployeeStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update account status by employee id
      tags:
      - Employee
  /employees/{id}/general-info:
    put:
      consumes:
      - application/json
      description: Update general info of the employee by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateEmployeeGeneralInfoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.UpdateGeneralEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update general info of the employee by id
      tags:
      - Employee
  /employees/{id}/personal-info:
    put:
      consumes:
      - application/json
      description: Update personal info of the employee by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdatePersonalInfoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.UpdatePersonalEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update personal info of the employee by id
      tags:
      - Employee
  /employees/{id}/skills:
    put:
      consumes:
      - application/json
      description: Update Skill for employee by id
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateSkillsInput'
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.UpdateSkillsEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update Skill for employee by id
      tags:
      - Employee
  /employees/{id}/upload-avatar:
    post:
      consumes:
      - application/json
      description: Upload avatar of employee by id
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: avatar upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.EmployeeContentDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Upload avatar of employee by id
      tags:
      - Employee
  /employees/{id}/upload-content:
    post:
      consumes:
      - application/json
      description: Upload content of employee by id
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: content upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.EmployeeContentDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Upload content of employee by id
      tags:
      - Employee
  /feedbacks:
    get:
      consumes:
      - application/json
      description: Get list feedbacks
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Status
        in: query
        name: status
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.ListFeedbackResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list feedbacks
      tags:
      - Feedback
  /feedbacks/{id}/topics/{topicID}:
    get:
      consumes:
      - application/json
      description: Get feedback detail for logged-in users
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Event Topic ID
        in: path
        name: topicID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.FeedbackDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get feedback detail for logged-in users
      tags:
      - Feedback
  /feedbacks/{id}/topics/{topicID}/submit:
    post:
      consumes:
      - application/json
      description: Submit the draft or done answers
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Event Topic ID
        in: path
        name: topicID
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.SubmitBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.SubmitFeedbackResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Submit the draft or done answers
      tags:
      - Feedback
  /metadata/account-roles:
    get:
      consumes:
      - application/json
      description: Get list values for account roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.AccountRoleResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list values for account roles
      tags:
      - Metadata
  /metadata/chapters:
    get:
      consumes:
      - application/json
      description: Get list values for chapters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.ChapterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list values for chapters
      tags:
      - Metadata
  /metadata/countries:
    get:
      consumes:
      - application/json
      description: Get all countries
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.CountriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get all countries
      tags:
      - Metadata
  /metadata/countries/{country_id}/cities:
    get:
      consumes:
      - application/json
      description: Get list cities by country
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.CitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list cities by country
      tags:
      - Metadata
  /metadata/positions:
    get:
      consumes:
      - application/json
      description: Get list values for positions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.PositionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list values for positions
      tags:
      - Metadata
  /metadata/project-statuses:
    get:
      consumes:
      - application/json
      description: Get list values for project statuses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/view.MetaData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list values for project statuses
      tags:
      - Metadata
  /metadata/questions:
    get:
      consumes:
      - application/json
      description: Get list question by category and subcategory
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.GetQuestionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list question by category and subcategory
      tags:
      - Metadata
  /metadata/seniorities:
    get:
      consumes:
      - application/json
      description: Get list values for sentitorities
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.SeniorityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list values for sentitorities
      tags:
      - Metadata
  /metadata/stacks:
    get:
      consumes:
      - application/json
      description: Get list values for stacks
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.StackResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list values for stacks
      tags:
      - Metadata
  /metadata/working-status:
    get:
      consumes:
      - application/json
      description: Get list values for working status
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/view.MetaData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list values for working status
      tags:
      - Metadata
  /profile:
    get:
      consumes:
      - application/json
      description: Get profile information of employee
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.ProfileDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get profile information of employee
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Update profile info by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateInfoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.UpdateProfileInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update profile info by id
      tags:
      - Profile
  /profile/upload-avatar:
    post:
      consumes:
      - application/json
      description: Upload avatar  by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: content upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.EmployeeContentDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Upload avatar  by id
      tags:
      - Profile
  /project/{id}/members/{memberID}:
    delete:
      consumes:
      - application/json
      description: Delete member in a project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: project ID
        in: path
        name: id
        required: true
        type: string
      - description: employee ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Delete member in a project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Unassign member in a project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Unassign member in a project
      tags:
      - Project
  /projects:
    get:
      consumes:
      - application/json
      description: Get list of project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project status
        in: query
        name: status
        type: string
      - description: Project name
        in: query
        name: name
        type: string
      - description: Project type
        in: query
        name: type
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.ProjectListDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list of project
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Create new project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.CreateProjectInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.CreateProjectData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Create new project
      tags:
      - Project
  /projects/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.ProjectListDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get details of a project
      tags:
      - Project
  /projects/{id}/contact-info:
    put:
      consumes:
      - application/json
      description: Update contact info of the project by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateContactInfoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.UpdateProjectContactInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update contact info of the project by id
      tags:
      - Project
  /projects/{id}/general-info:
    put:
      consumes:
      - application/json
      description: Update general info of the project by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateProjectGeneralInfoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.UpdateProjectGeneralInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update general info of the project by id
      tags:
      - Project
  /projects/{id}/members:
    get:
      consumes:
      - application/json
      description: Get list members of project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        type: string
      - description: Status
        in: query
        name: status
        type: string
      - description: Preload data with default value is true
        in: query
        name: preload
        type: boolean
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      - description: Sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.ProjectMemberListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list members of project
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Assign member in an existing project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.AssignMemberInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.CreateMemberDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Assign member into an existing project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Update member in an existing project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateMemberInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.CreateMemberDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update member in an existing project
      tags:
      - Project
  /projects/{id}/sending-survey-state:
    put:
      consumes:
      - application/json
      description: Update allows sending survey for project by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Allows sending survey
        in: query
        name: allowsSendingSurvey
        required: true
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update allows sending survey for project by id
      tags:
      - Project
  /projects/{id}/status:
    put:
      consumes:
      - application/json
      description: Update status for project by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Project Status
        in: body
        name: status
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.UpdateProjectStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update status for project by id
      tags:
      - Project
  /projects/{id}/work-units:
    get:
      consumes:
      - application/json
      description: Get list work units of a project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.ListWorkUnitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list work units of a project
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Get work unit of a project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.CreateWorkUnitBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.WorkUnitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Create work unit of a project
      tags:
      - Project
  /projects/{id}/work-units/{workUnitID}:
    put:
      consumes:
      - application/json
      description: Update work unit info
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Unit ID
        in: path
        name: workUnitID
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateWorkUnitInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update work unit info
      tags:
      - Project
  /projects/{id}/work-units/{workUnitID}/archive:
    put:
      consumes:
      - application/json
      description: Archive an active work unit of a project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Unit ID
        in: path
        name: workUnitID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Archive an active work unit of a project
      tags:
      - Project
  /projects/{id}/work-units/{workUnitID}/unarchive:
    put:
      consumes:
      - application/json
      description: Unarchive an archive work unit of a project
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Unit ID
        in: path
        name: workUnitID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Unarchive an archive work unit of a project
      tags:
      - Project
  /surveys:
    get:
      consumes:
      - application/json
      description: Get list event
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Event Subtype
        in: query
        name: subtype
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.ListSurveyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get list event
      tags:
      - Survey
    post:
      consumes:
      - application/json
      description: Create new survey
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.CreateSurveyFeedbackInput'
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Create new survey
      tags:
      - Survey
  /surveys/{id}:
    delete:
      consumes:
      - application/json
      description: Delete survey by id
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Delete survey by id
      tags:
      - Survey
    get:
      consumes:
      - application/json
      description: Get survey detail
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.ListSurveyDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get survey detail
      tags:
      - Survey
  /surveys/{id}/done:
    put:
      consumes:
      - application/json
      description: Mark done feedback event
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Mark done feedback event
      tags:
      - Survey
  /surveys/{id}/send:
    post:
      consumes:
      - application/json
      description: Send the survey
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.SendSurveyInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Send the survey
      tags:
      - Survey
  /surveys/{id}/topics/{topicID}:
    delete:
      consumes:
      - application/json
      description: delete survey topic
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: delete survey topic
      tags:
      - Survey
    get:
      consumes:
      - application/json
      description: Get detail for peer review
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Event Topic ID
        in: path
        name: topicID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.SurveyTopicDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get detail for peer review
      tags:
      - Survey
  /surveys/{id}/topics/{topicID}/employees:
    delete:
      consumes:
      - application/json
      description: Delete reviewers in a topic
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Event Topic ID
        in: path
        name: topicID
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.DeleteTopicReviewersBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Delete reviewers in a topic
      tags:
      - Survey
    put:
      consumes:
      - application/json
      description: Update reviewers in a topic
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/request.UpdateTopicReviewersBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Update reviewers in a topic
      tags:
      - Survey
  /surveys/{id}/topics/{topicID}/reviews/{reviewID}:
    get:
      consumes:
      - application/json
      description: Get survey review detail
      parameters:
      - description: jwt token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/view.FeedbackReviewDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/view.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/view.ErrorResponse'
      summary: Get survey review detail
      tags:
      - Survey
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
