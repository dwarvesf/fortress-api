basePath: /api/v1
definitions:
  APIKeyData:
    properties:
      key:
        type: string
    type: object
  APIKeyResponse:
    properties:
      data:
        $ref: '#/definitions/APIKeyData'
    type: object
  AccountingItem:
    properties:
      amount:
        type: number
      name:
        type: string
    type: object
  ActionItemReportResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/AuditActionItemReport'
        type: array
    type: object
  ActionItemSquash:
    properties:
      snapDate:
        type: string
      trend:
        type: number
      value:
        type: integer
    type: object
  ActionItemSquashReport:
    properties:
      all:
        items:
          $ref: '#/definitions/ActionItemSquash'
        type: array
      high:
        items:
          $ref: '#/definitions/ActionItemSquash'
        type: array
      low:
        items:
          $ref: '#/definitions/ActionItemSquash'
        type: array
      medium:
        items:
          $ref: '#/definitions/ActionItemSquash'
        type: array
    type: object
  ActionItemSquashReportResponse:
    properties:
      data:
        $ref: '#/definitions/ActionItemSquashReport'
    type: object
  ActionItemTrend:
    properties:
      high:
        type: number
      low:
        type: number
      medium:
        type: number
    type: object
  Address:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      lat:
        type: string
      long:
        type: string
    type: object
  AggregatedSalaryAdvance:
    properties:
      amountICY:
        type: integer
      amountUSD:
        type: number
      discordID:
        type: string
      discordUsername:
        type: string
      employeeID:
        type: string
    type: object
  AmountEachProfiles:
    properties:
      amount:
        type: string
      profileID:
        type: string
      usdAmount:
        type: number
    type: object
  ApiError:
    description: validation error details
    properties:
      enums:
        description: available options incase of field's payload is enums
        items:
          type: string
        type: array
      field:
        description: the field cause the error
        type: string
      msg:
        description: error message
        type: string
    type: object
  Application:
    properties:
      active:
        type: boolean
      applicationProfileID:
        type: string
      id:
        type: integer
      name:
        type: string
      ownerProfileID:
        type: string
      serviceFee:
        type: number
    type: object
  AssignMemberRequest:
    properties:
      deploymentType:
        type: string
      discount:
        type: number
      employeeID:
        type: string
      endDate:
        type: string
      isLead:
        type: boolean
      leadCommissionRate:
        type: number
      note:
        type: string
      positions:
        items:
          type: string
        type: array
      rate:
        type: number
      seniorityID:
        type: string
      startDate:
        type: string
      status:
        type: string
      upsellCommissionRate:
        type: number
      upsellPersonID:
        type: string
    required:
    - deploymentType
    - positions
    - rate
    - seniorityID
    - status
    type: object
  AssociatedAccounts:
    properties:
      createdAt:
        type: string
      id:
        type: string
      isGuildMember:
        type: boolean
      platform:
        type: string
      platformIdentifier:
        type: string
      platformMetadata: {}
      profileID:
        type: string
      updatedAt:
        type: string
    type: object
  Audit:
    properties:
      avg:
        type: number
      quarter:
        type: string
      trend:
        type: number
    type: object
  AuditActionItemReport:
    properties:
      high:
        type: integer
      low:
        type: integer
      medium:
        type: integer
      quarter:
        type: string
      trend:
        $ref: '#/definitions/ActionItemTrend'
    type: object
  AuditData:
    properties:
      average:
        items:
          $ref: '#/definitions/Audit'
        type: array
      groups:
        items:
          $ref: '#/definitions/GroupAudit'
        type: array
    type: object
  AuditResponse:
    properties:
      data:
        $ref: '#/definitions/AuditData'
    type: object
  AuditSummaries:
    properties:
      summary:
        items:
          $ref: '#/definitions/AuditSummary'
        type: array
    type: object
  AuditSummariesResponse:
    properties:
      data:
        $ref: '#/definitions/AuditSummaries'
    type: object
  AuditSummary:
    properties:
      audit:
        $ref: '#/definitions/AuditValue'
      avatar:
        type: string
      code:
        type: string
      health:
        $ref: '#/definitions/AuditValue'
      id:
        type: string
      name:
        type: string
      newItem:
        $ref: '#/definitions/ItemValue'
      resolvedItem:
        $ref: '#/definitions/ItemValue'
      size:
        $ref: '#/definitions/ItemValue'
    type: object
  AuditValue:
    properties:
      trend:
        type: number
      value:
        type: number
    type: object
  AuthData:
    properties:
      accessToken:
        type: string
      employee:
        $ref: '#/definitions/EmployeeData'
    type: object
  AuthUserResponse:
    properties:
      data:
        $ref: '#/definitions/LoggedInUserData'
    type: object
  AvailableEmployee:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      fullName:
        type: string
      id:
        type: string
      positions:
        items:
          $ref: '#/definitions/Position'
        type: array
      projects:
        items:
          $ref: '#/definitions/BasicProjectInfo'
        type: array
      seniority:
        $ref: '#/definitions/Seniority'
      stacks:
        items:
          $ref: '#/definitions/Stack'
        type: array
      username:
        type: string
    type: object
  AvailableSlot:
    properties:
      createdAt:
        type: string
      id:
        type: string
      note:
        type: string
      positions:
        items:
          $ref: '#/definitions/Position'
        type: array
      project:
        $ref: '#/definitions/BasicProjectInfo'
      seniority:
        $ref: '#/definitions/Seniority'
      type:
        type: string
    type: object
  Bank:
    properties:
      bin:
        type: string
      code:
        type: string
      id:
        type: string
      logo:
        type: string
      name:
        type: string
      shortName:
        type: string
      swiftCode:
        type: string
    type: object
  BankAccount:
    properties:
      accountNumber:
        type: string
      address:
        type: string
      bankName:
        type: string
      currency:
        $ref: '#/definitions/Currency'
      currencyID:
        type: string
      id:
        type: string
      intermediaryBankAddress:
        type: string
      intermediaryBankName:
        type: string
      name:
        type: string
      ownerName:
        type: string
      routingNumber:
        type: string
      swiftCode:
        type: string
      ukSortCode:
        type: string
    type: object
  BaseSalary:
    properties:
      batch:
        type: integer
      category:
        type: string
      company_account_amount:
        type: integer
      contract_amount:
        type: integer
      currency:
        $ref: '#/definitions/Currency'
      currency_id:
        type: string
      effective_date:
        type: string
      employee_id:
        type: string
      id:
        type: string
      insurance_amount:
        type: integer
      personal_account_amount:
        type: integer
      type:
        type: string
    type: object
  BasicBankAccountInfo:
    properties:
      accountNumber:
        type: string
      bankName:
        type: string
      id:
        type: string
      ownerName:
        type: string
    type: object
  BasicClientInfo:
    properties:
      address:
        type: string
      contacts:
        items:
          $ref: '#/definitions/ClientContact'
        type: array
      description:
        type: string
      id:
        type: string
      name:
        type: string
      registrationNumber:
        type: string
    type: object
  BasicCompanyInfo:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
      registrationNumber:
        type: string
    type: object
  BasicCountryInfo:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  BasicEmployeeInfo:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      fullName:
        type: string
      id:
        type: string
      username:
        type: string
    type: object
  BasicEventQuestionRequest:
    properties:
      answer:
        type: string
      eventQuestionID:
        type: string
      note:
        type: string
    required:
    - eventQuestionID
    type: object
  BasicMember:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      employeeID:
        type: string
      fullName:
        type: string
      username:
        type: string
    type: object
  BasicProjectHeadInfo:
    properties:
      avatar:
        type: string
      commissionRate:
        type: number
      displayName:
        type: string
      employeeID:
        type: string
      fullName:
        type: string
      position:
        type: string
      username:
        type: string
    type: object
  BasicProjectInfo:
    properties:
      avatar:
        type: string
      code:
        type: string
      id:
        type: string
      name:
        type: string
      status:
        type: string
      type:
        type: string
    type: object
  BraineryMetric:
    properties:
      contributors:
        items:
          $ref: '#/definitions/Post'
        type: array
      latestPosts:
        items:
          $ref: '#/definitions/Post'
        type: array
      newContributors:
        items:
          $ref: '#/definitions/Post'
        type: array
      tags:
        items:
          type: string
        type: array
      topContributors:
        items:
          $ref: '#/definitions/TopContributor'
        type: array
    type: object
  BraineryMetricResponse:
    properties:
      data:
        $ref: '#/definitions/BraineryMetric'
    type: object
  Chain:
    properties:
      chainID:
        type: string
      explorer:
        type: string
      icon:
        type: string
      id:
        type: string
      name:
        type: string
      rpc:
        type: string
      symbol:
        type: string
      type:
        type: string
    type: object
  Chapter:
    properties:
      code:
        type: string
      id:
        type: string
      leadID:
        type: string
      name:
        type: string
    type: object
  ChapterResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Chapter'
        type: array
    type: object
  CheckSalaryAdvance:
    properties:
      amountICY:
        type: string
      amountUSD:
        type: string
    type: object
  CheckSalaryAdvanceResponse:
    properties:
      data:
        $ref: '#/definitions/CheckSalaryAdvance'
    type: object
  CitiesResponse:
    properties:
      data:
        items:
          type: string
        type: array
    type: object
  City:
    properties:
      lat:
        type: string
      long:
        type: string
      name:
        type: string
    type: object
  Client:
    properties:
      address:
        type: string
      avatar:
        type: string
      city:
        type: string
      companySize:
        type: string
      contacts:
        items:
          $ref: '#/definitions/ClientContact'
        type: array
      country:
        type: string
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      industry:
        type: string
      isPublic:
        type: boolean
      lat:
        type: string
      long:
        type: string
      name:
        type: string
      projects:
        items:
          $ref: '#/definitions/Project'
        type: array
      registrationNumber:
        type: string
      solutionType:
        type: string
      updatedAt:
        type: string
      website:
        type: string
    type: object
  ClientContact:
    properties:
      emails:
        items:
          type: string
        type: array
      id:
        type: string
      isMainContact:
        type: boolean
      name:
        type: string
      role:
        type: string
    type: object
  ClientContactInfo:
    properties:
      emails:
        items:
          type: string
        type: array
      id:
        type: string
      isMainContact:
        type: boolean
      name:
        type: string
    type: object
  ClientInfo:
    properties:
      clientAddress:
        type: string
      clientCompany:
        type: string
      contacts:
        items:
          $ref: '#/definitions/ClientContactInfo'
        type: array
    type: object
  CompanyContactInfo:
    properties:
      address:
        type: string
      phone:
        type: string
    type: object
  CompanyInfo:
    properties:
      description:
        type: string
      id:
        type: string
      info:
        additionalProperties:
          $ref: '#/definitions/CompanyContactInfo'
        type: object
      name:
        type: string
      registrationNumber:
        type: string
    type: object
  ContentData:
    properties:
      url:
        type: string
    type: object
  ContentDataResponse:
    properties:
      data:
        $ref: '#/definitions/ContentData'
    type: object
  CountriesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Country'
        type: array
    type: object
  Country:
    properties:
      cities:
        items:
          $ref: '#/definitions/City'
        type: array
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  CreateBraineryLogRequest:
    properties:
      discordID:
        type: string
      githubID:
        type: string
      publishedAt:
        type: string
      reward:
        type: number
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      url:
        type: string
    required:
    - discordID
    - publishedAt
    - reward
    - tags
    - title
    - url
    type: object
  CreateClientContactInput:
    properties:
      emails:
        items:
          type: string
        type: array
      isMainContact:
        type: boolean
      name:
        type: string
      role:
        type: string
    type: object
  CreateClientRequest:
    properties:
      address:
        type: string
      contacts:
        items:
          $ref: '#/definitions/CreateClientContactInput'
        type: array
      country:
        type: string
      description:
        type: string
      industry:
        type: string
      name:
        type: string
      registrationNumber:
        type: string
      website:
        type: string
    type: object
  CreateClientResponse:
    properties:
      data:
        $ref: '#/definitions/Client'
    type: object
  CreateEmployeeRequest:
    properties:
      displayName:
        type: string
      fullName:
        maxLength: 100
        type: string
      joinedDate:
        type: string
      personalEmail:
        type: string
      positions:
        items:
          type: string
        type: array
      referredBy:
        type: string
      roles:
        items:
          type: string
        type: array
      salary:
        type: integer
      seniorityID:
        type: string
      status:
        type: string
      teamEmail:
        type: string
    required:
    - displayName
    - fullName
    - joinedDate
    - personalEmail
    - positions
    - roles
    - salary
    - seniorityID
    - status
    - teamEmail
    type: object
  CreateMemberData:
    properties:
      avatar:
        type: string
      deploymentType:
        type: string
      discount:
        type: number
      displayName:
        type: string
      employeeID:
        type: string
      fullName:
        type: string
      isLead:
        type: boolean
      leadCommissionRate:
        type: number
      note:
        type: string
      positions:
        items:
          $ref: '#/definitions/Position'
        type: array
      projectMemberID:
        type: string
      projectSlotID:
        type: string
      rate:
        type: number
      seniority:
        $ref: '#/definitions/Seniority'
      status:
        type: string
      upsellCommissionRate:
        type: number
      upsellPerson:
        $ref: '#/definitions/BasicEmployeeInfo'
      username:
        type: string
    type: object
  CreateMemberDataResponse:
    properties:
      data:
        $ref: '#/definitions/CreateMemberData'
    type: object
  CreatePositionInput:
    properties:
      code:
        type: string
      name:
        type: string
    required:
    - code
    - name
    type: object
  CreateProjectRequest:
    properties:
      accountManagers:
        items:
          $ref: '#/definitions/ProjectHeadRequest'
        type: array
      auditNotionID:
        type: string
      bankAccountID:
        type: string
      clientEmail:
        items:
          type: string
        type: array
      clientID:
        type: string
      code:
        type: string
      countryID:
        type: string
      deliveryManagers:
        items:
          $ref: '#/definitions/ProjectHeadRequest'
        type: array
      function:
        type: string
      members:
        items:
          $ref: '#/definitions/AssignMemberRequest'
        type: array
      name:
        type: string
      organizationID:
        type: string
      projectEmail:
        type: string
      salePersons:
        items:
          $ref: '#/definitions/ProjectHeadRequest'
        type: array
      startDate:
        type: string
      status:
        type: string
      type:
        type: string
    required:
    - countryID
    - function
    - name
    - status
    type: object
  CreateProjectRestponse:
    properties:
      accountManagers:
        items:
          $ref: '#/definitions/ProjectHead'
        type: array
      bankAccount:
        $ref: '#/definitions/BasicBankAccountInfo'
      client:
        $ref: '#/definitions/Client'
      clientEmail:
        items:
          type: string
        type: array
      code:
        type: string
      country:
        $ref: '#/definitions/BasicCountryInfo'
      createdAt:
        type: string
      deliveryManagers:
        items:
          $ref: '#/definitions/ProjectHead'
        type: array
      function:
        type: string
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/CreateMemberData'
        type: array
      name:
        type: string
      organization:
        $ref: '#/definitions/Organization'
      projectEmail:
        type: string
      salePersons:
        items:
          $ref: '#/definitions/ProjectHead'
        type: array
      startDate:
        type: string
      status:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  CreateStackInput:
    properties:
      avatar:
        type: string
      code:
        type: string
      name:
        type: string
    required:
    - code
    - name
    type: object
  CreateSurveyFeedbackInput:
    properties:
      fromDate:
        type: string
      quarter:
        type: string
      toDate:
        type: string
      type:
        type: string
      year:
        type: integer
    required:
    - type
    type: object
  CreateWorkUnitRequest:
    properties:
      members:
        items:
          type: string
        type: array
      name:
        type: string
      stacks:
        items:
          type: string
        type: array
      status:
        type: string
      type:
        type: string
      url:
        type: string
    required:
    - name
    - stacks
    - status
    - type
    type: object
  Currency:
    properties:
      id:
        type: string
      locale:
        type: string
      name:
        type: string
      symbol:
        type: string
      type:
        type: string
    type: object
  DeleteTopicReviewersBody:
    properties:
      reviewerIDs:
        items:
          type: string
        type: array
    type: object
  Domain:
    properties:
      average:
        type: number
      count:
        $ref: '#/definitions/LikertScaleCount'
      name:
        type: string
    type: object
  EmployeeAddress:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      lat:
        type: string
      long:
        type: string
    type: object
  EmployeeContentData:
    properties:
      url:
        type: string
    type: object
  EmployeeContentDataResponse:
    properties:
      data:
        $ref: '#/definitions/EmployeeContentData'
    type: object
  EmployeeData:
    properties:
      address:
        type: string
      avatar:
        type: string
      baseSalary:
        $ref: '#/definitions/BaseSalary'
      birthday:
        type: string
      chapters:
        items:
          $ref: '#/definitions/Chapter'
        type: array
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      discordID:
        type: string
      discordName:
        type: string
      displayName:
        type: string
      fullName:
        description: basic info
        type: string
      gender:
        type: string
      githubID:
        type: string
      horoscope:
        type: string
      id:
        type: string
      joinedDate:
        type: string
      leftDate:
        type: string
      lineManager:
        $ref: '#/definitions/BasicEmployeeInfo'
      linkedInName:
        type: string
      mbti:
        type: string
      mentees:
        items:
          $ref: '#/definitions/MenteeInfo'
        type: array
      notionID:
        type: string
      notionName:
        type: string
      organizations:
        items:
          $ref: '#/definitions/Organization'
        type: array
      personalEmail:
        type: string
      phoneNumber:
        type: string
      placeOfResidence:
        type: string
      positions:
        items:
          $ref: '#/definitions/Position'
        type: array
      projects:
        items:
          $ref: '#/definitions/EmployeeProjectData'
        type: array
      referredBy:
        $ref: '#/definitions/BasicEmployeeInfo'
      roles:
        items:
          $ref: '#/definitions/Role'
        type: array
      seniority:
        $ref: '#/definitions/Seniority'
      stacks:
        items:
          $ref: '#/definitions/Stack'
        type: array
      status:
        allOf:
        - $ref: '#/definitions/WorkingStatus'
        description: working info
      teamEmail:
        type: string
      updatedAt:
        type: string
      username:
        type: string
      wiseAccountNumber:
        type: string
      wiseCurrency:
        type: string
      wiseRecipientEmail:
        type: string
      wiseRecipientID:
        type: string
      wiseRecipientName:
        type: string
    type: object
  EmployeeDataResponse:
    properties:
      data:
        $ref: '#/definitions/EmployeeData'
    type: object
  EmployeeInvitationData:
    properties:
      employee:
        $ref: '#/definitions/InvitedEmployeeInfo'
      employeeID:
        type: string
      id:
        type: string
      invitedBy:
        type: string
      isBasecampAccountCreated:
        type: boolean
      isCompleted:
        type: boolean
      isDiscordRoleAssigned:
        type: boolean
      isInfoUpdated:
        type: boolean
      isTeamEmailCreated:
        type: boolean
    type: object
  EmployeeInvitationResponse:
    properties:
      data:
        $ref: '#/definitions/EmployeeInvitationData'
    type: object
  EmployeeListDataResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/EmployeeData'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  EmployeeLocation:
    properties:
      address:
        $ref: '#/definitions/EmployeeAddress'
      avatar:
        type: string
      chapters:
        items:
          $ref: '#/definitions/Chapter'
        type: array
      discordID:
        type: string
      displayName:
        type: string
      fullName:
        type: string
    type: object
  EmployeeLocationListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/EmployeeLocation'
        type: array
    type: object
  EmployeeProjectData:
    properties:
      avatar:
        type: string
      code:
        type: string
      deploymentType:
        type: string
      endDate:
        type: string
      id:
        type: string
      name:
        type: string
      positions:
        items:
          $ref: '#/definitions/Position'
        type: array
      startDate:
        type: string
      status:
        type: string
    type: object
  EmployeeTotalEarn:
    properties:
      totalEarnsICY:
        type: string
      totalEarnsUSD:
        type: string
    type: object
  EngagementDashboard:
    properties:
      content:
        type: string
      questionID:
        type: string
      stats:
        items:
          $ref: '#/definitions/EngagementDashboardQuestionStat'
        type: array
    type: object
  EngagementDashboardDetail:
    properties:
      questionID:
        type: string
      stats:
        items:
          $ref: '#/definitions/EngagementDashboardQuestionDetailStat'
        type: array
    type: object
  EngagementDashboardQuestionDetailStat:
    properties:
      field:
        type: string
      point:
        type: number
      startDate:
        type: string
    type: object
  EngagementDashboardQuestionStat:
    properties:
      point:
        type: number
      startDate:
        type: string
      title:
        type: string
    type: object
  EngineeringHealth:
    properties:
      avg:
        type: number
      quarter:
        type: string
      trend:
        type: number
    type: object
  EngineeringHealthData:
    properties:
      average:
        items:
          $ref: '#/definitions/EngineeringHealth'
        type: array
      groups:
        items:
          $ref: '#/definitions/GroupEngineeringHealth'
        type: array
    type: object
  EngineeringHealthResponse:
    properties:
      data:
        $ref: '#/definitions/EngineeringHealthData'
    type: object
  EngineeringHealthTrend:
    properties:
      collaboration:
        type: number
      delivery:
        type: number
      feedback:
        type: number
      quality:
        type: number
    type: object
  ErrorResponse:
    properties:
      error:
        type: string
      errors:
        items:
          $ref: '#/definitions/ApiError'
        type: array
    type: object
  EventReviewerStatus:
    enum:
    - none
    - new
    - draft
    - done
    type: string
    x-enum-varnames:
    - EventReviewerStatusNone
    - EventReviewerStatusNew
    - EventReviewerStatusDraft
    - EventReviewerStatusDone
  FeedBackReviewDetail:
    properties:
      employee:
        $ref: '#/definitions/BasicEmployeeInfo'
      project:
        $ref: '#/definitions/BasicProjectInfo'
      questions:
        items:
          $ref: '#/definitions/QuestionAnswer'
        type: array
      relationship:
        type: string
      reviewer:
        $ref: '#/definitions/BasicEmployeeInfo'
      topicName:
        type: string
    type: object
  Feedback:
    properties:
      author:
        $ref: '#/definitions/BasicEmployeeInfo'
      employeeID:
        type: string
      eventID:
        type: string
      eventReviewerID:
        type: string
      isRead:
        type: boolean
      lastUpdated:
        type: string
      projectID:
        type: string
      status:
        type: string
      subtype:
        type: string
      title:
        type: string
      topicID:
        type: string
      type:
        type: string
    type: object
  FeedbackCount:
    properties:
      done:
        type: integer
      sent:
        type: integer
      total:
        type: integer
    type: object
  FeedbackDetail:
    properties:
      answers:
        items:
          $ref: '#/definitions/QuestionAnswer'
        type: array
      employeeID:
        type: string
      eventID:
        type: string
      project:
        $ref: '#/definitions/BasicProjectInfo'
      relationship:
        type: string
      reviewer:
        $ref: '#/definitions/BasicEmployeeInfo'
      status:
        type: string
      title:
        type: string
      topicID:
        type: string
    type: object
  FeedbackDetailResponse:
    properties:
      data:
        $ref: '#/definitions/FeedbackDetail'
    type: object
  FeedbackReviewDetailResponse:
    properties:
      data:
        $ref: '#/definitions/FeedBackReviewDetail'
    type: object
  GetCurrenciesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Currency'
        type: array
    type: object
  GetDashboardResourceUtilizationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/ResourceUtilization'
        type: array
    type: object
  GetDetailClientResponse:
    properties:
      data:
        $ref: '#/definitions/Client'
    type: object
  GetEmployeeEarnTransactionsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/MochiTransaction'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  GetEmployeeTotalEarnResponse:
    properties:
      data:
        $ref: '#/definitions/EmployeeTotalEarn'
    type: object
  GetEngagementDashboardDetailResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/EngagementDashboardDetail'
        type: array
    type: object
  GetEngagementDashboardResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/EngagementDashboard'
        type: array
    type: object
  GetListClientResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Client'
        type: array
    type: object
  GetListEmployeeQuery:
    properties:
      chapters:
        items:
          type: string
        type: array
      keyword:
        type: string
      lineManagers:
        items:
          type: string
        type: array
      organizations:
        items:
          type: string
        type: array
      page:
        description: page index
        type: integer
      positions:
        items:
          type: string
        type: array
      preload:
        type: boolean
      projects:
        items:
          type: string
        type: array
      seniorities:
        items:
          type: string
        type: array
      size:
        description: page size
        type: integer
      stacks:
        items:
          type: string
        type: array
      workingStatuses:
        items:
          type: string
        type: array
    type: object
  GetNftMetadataResponse:
    properties:
      data:
        $ref: '#/definitions/NftInfo'
    type: object
  GetQuestionResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Question'
        type: array
    type: object
  GroupAudit:
    properties:
      backend:
        type: number
      blockchain:
        type: number
      frontend:
        type: number
      mobile:
        type: number
      process:
        type: number
      quarter:
        type: string
      system:
        type: number
      trend:
        $ref: '#/definitions/GroupAuditTrend'
    type: object
  GroupAuditTrend:
    properties:
      backend:
        type: number
      blockchain:
        type: number
      frontend:
        type: number
      mobile:
        type: number
      process:
        type: number
      system:
        type: number
    type: object
  GroupEngineeringHealth:
    properties:
      collaboration:
        type: number
      delivery:
        type: number
      feedback:
        type: number
      quality:
        type: number
      quarter:
        type: string
      trend:
        $ref: '#/definitions/EngineeringHealthTrend'
    type: object
  InvitedEmployeeInfo:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      fullName:
        type: string
      id:
        type: string
      personalEmail:
        type: string
      teamEmail:
        type: string
      username:
        type: string
    type: object
  Invoice:
    properties:
      bankID:
        type: string
      cc:
        items:
          type: string
        type: array
      conversionAmount:
        type: number
      conversionRate:
        type: number
      description:
        type: string
      discount:
        type: number
      dueAt:
        type: string
      email:
        type: string
      errorInvoiceID:
        type: string
      failedAt:
        type: string
      invoiceFileURL:
        type: string
      invoicedAt:
        type: string
      lineItems:
        items:
          $ref: '#/definitions/InvoiceItem'
        type: array
      month:
        type: integer
      note:
        type: string
      number:
        type: string
      paidAt:
        type: string
      projectID:
        type: string
      scheduledDate:
        type: string
      sentBy:
        type: string
      status:
        type: string
      subTotal:
        type: number
      tax:
        type: number
      threadID:
        type: string
      total:
        type: number
      year:
        type: integer
    type: object
  InvoiceData:
    properties:
      bankAccount:
        $ref: '#/definitions/BankAccount'
      bankID:
        type: string
      cc:
        items:
          type: string
        type: array
      client:
        $ref: '#/definitions/ClientInfo'
      companyInfo:
        $ref: '#/definitions/CompanyInfo'
      conversionAmount:
        type: number
      conversionRate:
        type: number
      description:
        type: string
      discount:
        type: number
      dueAt:
        type: string
      email:
        type: string
      errorInvoiceID:
        type: string
      failedAt:
        type: string
      invoiceFileURL:
        type: string
      invoicedAt:
        type: string
      lineItems:
        items:
          $ref: '#/definitions/InvoiceItem'
        type: array
      month:
        type: integer
      note:
        type: string
      number:
        type: string
      paidAt:
        type: string
      projectID:
        type: string
      projectName:
        type: string
      scheduledDate:
        type: string
      sentBy:
        type: string
      status:
        type: string
      subTotal:
        type: number
      tax:
        type: number
      threadID:
        type: string
      total:
        type: number
      year:
        type: integer
    type: object
  InvoiceItem:
    properties:
      cost:
        type: number
      description:
        type: string
      discount:
        type: number
      isExternal:
        type: boolean
      quantity:
        type: number
      unitCost:
        type: number
    type: object
  InvoiceListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/InvoiceData'
        type: array
      page:
        type: integer
      size:
        type: integer
      sort:
        type: string
      total:
        type: integer
    type: object
  InvoiceTemplateResponse:
    properties:
      data:
        $ref: '#/definitions/ProjectInvoiceTemplate'
    type: object
  ItemValue:
    properties:
      trend:
        type: number
      value:
        type: integer
    type: object
  LikertScaleCount:
    properties:
      agree:
        type: integer
      disagree:
        type: integer
      mixed:
        type: integer
      stronglyAgree:
        type: integer
      stronglyDisagree:
        type: integer
    type: object
  LineManagersResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/BasicEmployeeInfo'
        type: array
    type: object
  ListBankAccountResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/BankAccount'
        type: array
    type: object
  ListBankResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Bank'
        type: array
    type: object
  ListEarnResponse:
    properties:
      earns:
        items:
          $ref: '#/definitions/github_com_dwarvesf_fortress-api_pkg_view.Earn'
        type: array
    type: object
  ListFeedbackResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Feedback'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  ListResearchTopicResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/pkg_view.DiscordResearchTopic'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  ListSurveyDetailResponse:
    properties:
      data:
        $ref: '#/definitions/SurveyDetail'
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  ListSurveyResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Survey'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  ListWorkUnitResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/WorkUnit'
        type: array
    type: object
  LoggedInUserData:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      fullName:
        type: string
      id:
        type: string
      permissions:
        items:
          type: string
        type: array
      role:
        type: string
      teamEmail:
        type: string
    type: object
  MenteeInfo:
    properties:
      avatar:
        type: string
      displayName:
        type: string
      fullName:
        type: string
      id:
        type: string
      positions:
        items:
          $ref: '#/definitions/Position'
        type: array
      seniority:
        $ref: '#/definitions/Seniority'
      username:
        type: string
    type: object
  MessageResponse:
    properties:
      message:
        type: string
    type: object
  MetaData:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  MetaDataResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/MetaData'
        type: array
    type: object
  MochiProfile:
    properties:
      application:
        $ref: '#/definitions/Application'
      associatedAccounts:
        items:
          $ref: '#/definitions/AssociatedAccounts'
        type: array
      avatar:
        type: string
      createdAt:
        type: string
      id:
        type: string
      profileName:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  MochiTransaction:
    properties:
      action:
        type: string
      amount:
        type: string
      amountEachProfiles:
        items:
          $ref: '#/definitions/AmountEachProfiles'
        type: array
      chainID:
        type: string
      createdAt:
        type: string
      expiredAt:
        type: string
      externalID:
        type: string
      fromAmount:
        type: string
      fromProfile:
        $ref: '#/definitions/MochiProfile'
      fromProfileID:
        type: string
      fromProfileSource:
        type: string
      fromToken:
        $ref: '#/definitions/Token'
      fromTokenId:
        type: string
      id:
        type: string
      internalID:
        type: integer
      metadata:
        additionalProperties: true
        type: object
      onchainTxHash:
        type: string
      originalTxID:
        type: string
      otherProfile:
        $ref: '#/definitions/MochiProfile'
      otherProfileID:
        type: string
      otherProfileIds:
        items:
          type: string
        type: array
      otherProfileSource:
        type: string
      otherProfiles:
        items:
          $ref: '#/definitions/MochiProfile'
        type: array
      settledAt:
        type: string
      sourcePlatform:
        type: string
      status:
        type: string
      toAmount:
        type: string
      toToken:
        $ref: '#/definitions/Token'
      toTokenId:
        type: string
      token:
        $ref: '#/definitions/Token'
      tokenID:
        type: string
      totalAmount:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      usdAmount:
        type: number
    type: object
  NftInfo:
    properties:
      attributes:
        items:
          $ref: '#/definitions/pkg_view.attribute'
        type: array
      background_color:
        type: string
      description:
        type: string
      image:
        type: string
      name:
        type: string
    type: object
  NotionTechRadar:
    properties:
      assign:
        type: string
      categories:
        items:
          type: string
        type: array
      id:
        type: string
      name:
        type: string
      quadrant:
        type: string
      ring:
        type: string
      tags:
        items:
          type: string
        type: array
    type: object
  Organization:
    properties:
      avatar:
        type: string
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  OrganizationsResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Organization'
        type: array
    type: object
  PeerReviewer:
    properties:
      eventReviewerID:
        type: string
      isForcedDone:
        type: boolean
      relationship:
        $ref: '#/definitions/Relationship'
      reviewer:
        $ref: '#/definitions/BasicEmployeeInfo'
      status:
        $ref: '#/definitions/EventReviewerStatus'
    type: object
  Position:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  PositionResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Position'
        type: array
    type: object
  Post:
    properties:
      discordID:
        type: string
      publishedAt:
        type: string
      reward:
        type: number
      title:
        type: string
      url:
        type: string
    type: object
  ProfileData:
    properties:
      address:
        type: string
      avatar:
        type: string
      birthday:
        type: string
      city:
        type: string
      country:
        type: string
      discordID:
        type: string
      discordName:
        type: string
      displayName:
        type: string
      fullName:
        type: string
      gender:
        type: string
      githubID:
        type: string
      id:
        type: string
      linkedInName:
        type: string
      notionEmail:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      personalEmail:
        type: string
      phoneNumber:
        type: string
      placeOfResidence:
        type: string
      roles:
        items:
          $ref: '#/definitions/Role'
        type: array
      teamEmail:
        type: string
      username:
        type: string
      wiseAccountNumber:
        type: string
      wiseCurrency:
        type: string
      wiseRecipientEmail:
        type: string
      wiseRecipientID:
        type: string
      wiseRecipientName:
        type: string
    type: object
  ProfileDataResponse:
    properties:
      data:
        $ref: '#/definitions/ProfileData'
    type: object
  Project:
    properties:
      accountRating:
        type: integer
      allowsSendingSurvey:
        type: boolean
      avatar:
        type: string
      bankAccount:
        $ref: '#/definitions/BankAccount'
      bankAccountID:
        type: string
      client:
        $ref: '#/definitions/Client'
      clientEmail:
        type: string
      clientID:
        type: string
      code:
        type: string
      commissionConfigs:
        items:
          $ref: '#/definitions/ProjectCommissionConfig'
        type: array
      companyInfo:
        $ref: '#/definitions/CompanyInfo'
      companyInfoID:
        type: string
      country:
        $ref: '#/definitions/Country'
      countryID:
        type: string
      createdAt:
        type: string
      deliveryRating:
        type: integer
      end_date:
        type: string
      function:
        type: string
      heads:
        items:
          $ref: '#/definitions/ProjectHead'
        type: array
      id:
        type: string
      importantLevel:
        type: string
      leadRating:
        type: integer
      name:
        type: string
      organization:
        $ref: '#/definitions/Organization'
      organizationID:
        type: string
      projectEmail:
        type: string
      projectInfo:
        $ref: '#/definitions/ProjectInfo'
      projectMembers:
        items:
          $ref: '#/definitions/ProjectMember'
        type: array
      projectNotion:
        $ref: '#/definitions/ProjectNotion'
      projectStacks:
        items:
          $ref: '#/definitions/Stack'
        type: array
      slots:
        items:
          $ref: '#/definitions/ProjectSlot'
        type: array
      startDate:
        type: string
      status:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  ProjectCommissionConfig:
    properties:
      commissionRate:
        type: number
      createdAt:
        type: string
      id:
        type: string
      position:
        type: string
      projectID:
        type: string
      updatedAt:
        type: string
    type: object
  ProjectContentData:
    properties:
      url:
        type: string
    type: object
  ProjectContentDataResponse:
    properties:
      data:
        $ref: '#/definitions/ProjectContentData'
    type: object
  ProjectData:
    properties:
      accountManagers:
        items:
          $ref: '#/definitions/ProjectHead'
        type: array
      accountRating:
        type: integer
      allowsSendingSurvey:
        type: boolean
      auditNotionID:
        type: string
      avatar:
        type: string
      bankAccount:
        $ref: '#/definitions/BasicBankAccountInfo'
      client:
        $ref: '#/definitions/BasicClientInfo'
      clientEmail:
        items:
          type: string
        type: array
      code:
        type: string
      companyInfo:
        $ref: '#/definitions/BasicCompanyInfo'
      country:
        $ref: '#/definitions/BasicCountryInfo'
      createdAt:
        type: string
      currency:
        $ref: '#/definitions/Currency'
      deliveryManagers:
        items:
          $ref: '#/definitions/ProjectHead'
        type: array
      deliveryRating:
        type: integer
      endDate:
        type: string
      function:
        type: string
      id:
        type: string
      importantLevel:
        type: string
      industry:
        type: string
      leadRating:
        type: integer
      members:
        items:
          $ref: '#/definitions/ProjectMember'
        type: array
      monthlyChargeRate:
        type: number
      name:
        type: string
      organization:
        $ref: '#/definitions/Organization'
      projectEmail:
        type: string
      salePersons:
        items:
          $ref: '#/definitions/ProjectHead'
        type: array
      stacks:
        items:
          $ref: '#/definitions/Stack'
        type: array
      startDate:
        type: string
      status:
        type: string
      technicalLeads:
        items:
          $ref: '#/definitions/ProjectHead'
        type: array
      type:
        type: string
      updatedAt:
        type: string
    type: object
  ProjectDataResponse:
    properties:
      data:
        $ref: '#/definitions/ProjectData'
    type: object
  ProjectFunction:
    enum:
    - development
    - learning
    - training
    - management
    type: string
    x-enum-varnames:
    - ProjectFunctionDevelopment
    - ProjectFunctionLearning
    - ProjectFunctionTraining
    - ProjectFunctionManagement
  ProjectHead:
    properties:
      avatar:
        type: string
      commissionRate:
        type: number
      displayName:
        type: string
      employeeID:
        type: string
      finalCommissionRate:
        type: number
      fullName:
        type: string
      username:
        type: string
    type: object
  ProjectHeadRequest:
    properties:
      commissionRate:
        type: number
      employeeID:
        type: string
    type: object
  ProjectInfo:
    properties:
      basecampBucketID:
        type: integer
      basecampCampfireID:
        type: integer
      basecampMessageBoardID:
        type: integer
      basecampScheduleID:
        type: integer
      basecampSentryID:
        type: integer
      basecampTodolistID:
        type: integer
      createdAt:
        type: string
      gitlabID:
        type: integer
      id:
        type: string
      project:
        $ref: '#/definitions/Project'
      projectID:
        type: string
      repositories:
        items:
          type: integer
        type: array
      updatedAt:
        type: string
    type: object
  ProjectInvoiceTemplate:
    properties:
      bankAccount:
        $ref: '#/definitions/BankAccount'
      client:
        $ref: '#/definitions/ClientInfo'
      companyInfo:
        $ref: '#/definitions/CompanyInfo'
      id:
        type: string
      invoiceNumber:
        type: string
      lastInvoice:
        $ref: '#/definitions/Invoice'
      name:
        type: string
    type: object
  ProjectListDataResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/ProjectData'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  ProjectMember:
    properties:
      avatar:
        type: string
      currency:
        $ref: '#/definitions/Currency'
      deploymentType:
        type: string
      discount:
        type: number
      displayName:
        type: string
      employeeID:
        type: string
      endDate:
        type: string
      fullName:
        type: string
      isLead:
        type: boolean
      leadCommissionRate:
        type: number
      note:
        type: string
      positions:
        items:
          $ref: '#/definitions/Position'
        type: array
      projectMemberID:
        type: string
      projectSlotID:
        type: string
      rate:
        type: number
      seniority:
        $ref: '#/definitions/Seniority'
      startDate:
        type: string
      status:
        type: string
      upsellCommissionRate:
        type: number
      upsellPerson:
        $ref: '#/definitions/BasicEmployeeInfo'
      username:
        type: string
    type: object
  ProjectMemberListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/ProjectMember'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  ProjectNotion:
    properties:
      auditNotionID:
        type: string
      createdAt:
        type: string
      id:
        type: string
      project:
        $ref: '#/definitions/Project'
      projectID:
        type: string
      updatedAt:
        type: string
    type: object
  ProjectSize:
    properties:
      avatar:
        type: string
      code:
        type: string
      id:
        type: string
      name:
        type: string
      size:
        type: integer
    type: object
  ProjectSizeResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/ProjectSize'
        type: array
    type: object
  ProjectSlot:
    properties:
      createdAt:
        type: string
      deploymentType:
        type: string
      discount:
        type: number
      id:
        type: string
      note:
        type: string
      project:
        $ref: '#/definitions/Project'
      projectID:
        type: string
      projectMember:
        $ref: '#/definitions/ProjectMember'
      projectSlotPositions:
        items:
          $ref: '#/definitions/Position'
        type: array
      rate:
        type: number
      seniority:
        $ref: '#/definitions/Seniority'
      seniorityID:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      upsellPerson:
        $ref: '#/definitions/EmployeeData'
      upsellPersonID:
        type: string
    type: object
  ProjectStatus:
    enum:
    - on-boarding
    - active
    - paused
    - closed
    type: string
    x-enum-varnames:
    - ProjectStatusOnBoarding
    - ProjectStatusActive
    - ProjectStatusPaused
    - ProjectStatusClosed
  PublicClient:
    properties:
      address:
        $ref: '#/definitions/Address'
      avatar:
        type: string
      companySize:
        type: string
      id:
        type: string
      industry:
        type: string
      name:
        type: string
      solutionType:
        type: string
      stacks:
        items:
          type: string
        type: array
    type: object
  PublicClientListResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/PublicClient'
        type: array
    type: object
  Question:
    properties:
      category:
        type: string
      content:
        type: string
      id:
        type: string
      order:
        type: integer
      subcategory:
        type: string
      type:
        type: string
    type: object
  QuestionAnswer:
    properties:
      answer:
        type: string
      content:
        type: string
      domain:
        $ref: '#/definitions/QuestionDomain'
      eventQuestionID:
        type: string
      note:
        type: string
      order:
        type: integer
      type:
        type: string
    type: object
  QuestionDomain:
    enum:
    - engagement
    - workload
    - deadline
    - learning
    type: string
    x-enum-varnames:
    - QuestionDomainEngagement
    - QuestionDomainWorkload
    - QuestionDomainDeadline
    - QuestionDomainLearning
  Relationship:
    enum:
    - peer
    - line-manager
    - chapter-lead
    - self
    type: string
    x-enum-varnames:
    - RelationshipPeer
    - RelationshipLineManager
    - RelationshipChapterLead
    - RelationshipSelf
  ResourceAvailability:
    properties:
      employees:
        items:
          $ref: '#/definitions/AvailableEmployee'
        type: array
      slots:
        items:
          $ref: '#/definitions/AvailableSlot'
        type: array
    type: object
  ResourceAvailabilityResponse:
    properties:
      data:
        $ref: '#/definitions/ResourceAvailability'
    type: object
  ResourceUtilization:
    properties:
      available:
        type: integer
      date:
        type: string
      internal:
        type: integer
      staffed:
        type: integer
    type: object
  Role:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  RolesResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Role'
        type: array
    type: object
  SalaryAdvance:
    properties:
      amountICY:
        type: string
      amountUSD:
        type: string
      transactionHash:
        type: string
      transactionID:
        type: string
    type: object
  SalaryAdvanceReport:
    properties:
      salaryAdvances:
        items:
          $ref: '#/definitions/AggregatedSalaryAdvance'
        type: array
      totalICY:
        type: integer
      totalUSD:
        type: number
    type: object
  SalaryAdvanceReportRequest:
    properties:
      isPaid:
        type: boolean
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      sortOrder:
        $ref: '#/definitions/github_com_dwarvesf_fortress-api_pkg_model.SortOrder'
    type: object
  SalaryAdvanceReportResponse:
    properties:
      data:
        $ref: '#/definitions/SalaryAdvanceReport'
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  SalaryAdvanceRequest:
    properties:
      amount:
        type: string
      discordID:
        type: string
    type: object
  SalaryAdvanceResponse:
    properties:
      data:
        $ref: '#/definitions/SalaryAdvance'
    type: object
  SendInvoiceRequest:
    properties:
      bankID:
        type: string
      cc:
        items:
          type: string
        type: array
      description:
        type: string
      discount:
        minimum: 0
        type: number
      dueDate:
        type: string
      email:
        type: string
      invoiceDate:
        type: string
      invoiceMonth:
        maximum: 11
        minimum: 0
        type: integer
      invoiceYear:
        minimum: 0
        type: integer
      isDraft:
        type: boolean
      lineItems:
        items:
          $ref: '#/definitions/InvoiceItem'
        type: array
      note:
        type: string
      number:
        type: string
      projectID:
        type: string
      subtotal:
        minimum: 0
        type: number
      tax:
        minimum: 0
        type: number
      total:
        minimum: 0
        type: number
    required:
    - bankID
    - dueDate
    - email
    - invoiceDate
    - projectID
    type: object
  SendSurveyInput:
    properties:
      topicIDs:
        items:
          type: string
        type: array
      type:
        type: string
    required:
    - type
    type: object
  Seniority:
    properties:
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  SeniorityResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Seniority'
        type: array
    type: object
  Stack:
    properties:
      avatar:
        type: string
      code:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  StackResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/Stack'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  SubmitFeedback:
    properties:
      answers:
        items:
          $ref: '#/definitions/QuestionAnswer'
        type: array
      employeeID:
        type: string
      eventID:
        type: string
      reviewer:
        $ref: '#/definitions/BasicEmployeeInfo'
      status:
        type: string
      title:
        type: string
      topicID:
        type: string
    type: object
  SubmitFeedbackRequest:
    properties:
      answers:
        items:
          $ref: '#/definitions/BasicEventQuestionRequest'
        type: array
      status:
        $ref: '#/definitions/EventReviewerStatus'
    required:
    - answers
    - status
    type: object
  SubmitFeedbackResponse:
    properties:
      data:
        $ref: '#/definitions/SubmitFeedback'
    type: object
  SubmitOnboardingFormRequest:
    properties:
      address:
        type: string
      avatar:
        type: string
      city:
        type: string
      country:
        type: string
      dateOfBirth:
        type: string
      discordName:
        type: string
      gender:
        type: string
      githubID:
        type: string
      horoscope:
        type: string
      identityCardPhotoBack:
        type: string
      identityCardPhotoFront:
        type: string
      lat:
        type: string
      linkedInName:
        type: string
      localBankBranch:
        type: string
      localBankCurrency:
        type: string
      localBankNumber:
        type: string
      localBankRecipientName:
        type: string
      localBranchName:
        type: string
      long:
        type: string
      mbti:
        type: string
      notionName:
        type: string
      passportPhotoBack:
        type: string
      passportPhotoFront:
        type: string
      phoneNumber:
        maxLength: 18
        minLength: 8
        type: string
      placeOfResidence:
        type: string
    required:
    - address
    - city
    - country
    - dateOfBirth
    - discordName
    - gender
    - horoscope
    - localBankBranch
    - localBankCurrency
    - localBankNumber
    - localBankRecipientName
    - localBranchName
    - mbti
    - phoneNumber
    - placeOfResidence
    type: object
  SummaryWorkUnitDistributionData:
    properties:
      development:
        type: number
      learning:
        type: number
      management:
        type: number
      training:
        type: number
    type: object
  SummaryWorkUnitDistributionResponse:
    properties:
      data:
        $ref: '#/definitions/SummaryWorkUnitDistributionData'
    type: object
  Survey:
    properties:
      count:
        $ref: '#/definitions/FeedbackCount'
      domains:
        items:
          $ref: '#/definitions/Domain'
        type: array
      endDate:
        type: string
      id:
        type: string
      startDate:
        type: string
      status:
        type: string
      subtype:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  SurveyDetail:
    properties:
      author:
        $ref: '#/definitions/BasicEmployeeInfo'
      endDate:
        type: string
      eventID:
        type: string
      startDate:
        type: string
      status:
        type: string
      subtype:
        type: string
      title:
        type: string
      topics:
        items:
          $ref: '#/definitions/Topic'
        type: array
      type:
        type: string
    type: object
  SurveyTopicDetail:
    properties:
      employee:
        $ref: '#/definitions/BasicEmployeeInfo'
      participants:
        items:
          $ref: '#/definitions/PeerReviewer'
        type: array
      title:
        type: string
      topicID:
        type: string
    type: object
  SurveyTopicDetailResponse:
    properties:
      data:
        $ref: '#/definitions/SurveyTopicDetail'
    type: object
  Token:
    properties:
      address:
        type: string
      chain:
        $ref: '#/definitions/Chain'
      chainID:
        type: string
      coinGeckoID:
        type: string
      decimal:
        type: integer
      icon:
        type: string
      id:
        type: string
      name:
        type: string
      native:
        type: boolean
      price:
        type: number
      symbol:
        type: string
    type: object
  TopContributor:
    properties:
      count:
        type: integer
      discordID:
        type: string
      ranking:
        type: integer
    type: object
  Topic:
    properties:
      comments:
        type: integer
      count:
        $ref: '#/definitions/FeedbackCount'
      domains:
        items:
          $ref: '#/definitions/Domain'
        type: array
      employee:
        $ref: '#/definitions/BasicEmployeeInfo'
      eventID:
        type: string
      id:
        type: string
      isForcedDone:
        type: boolean
      participants:
        items:
          $ref: '#/definitions/BasicEmployeeInfo'
        type: array
      project:
        $ref: '#/definitions/BasicProjectInfo'
      reviewID:
        type: string
      status:
        type: string
      subtype:
        type: string
      title:
        type: string
      type:
        type: string
    type: object
  Trend:
    properties:
      deadline:
        type: number
      learning:
        type: number
      workload:
        type: number
    type: object
  UnreadFeedbackCountData:
    properties:
      count:
        type: integer
      reviewerID:
        type: string
    type: object
  UnreadFeedbackCountResponse:
    properties:
      data:
        $ref: '#/definitions/UnreadFeedbackCountData'
    type: object
  UpdateBaseSalaryRequest:
    properties:
      batch:
        type: integer
      companyAccountAmount:
        minimum: 0
        type: integer
      contractAmount:
        minimum: 0
        type: integer
      currencyCode:
        type: string
      effectiveDate:
        type: string
      personalAccountAmount:
        minimum: 0
        type: integer
    required:
    - batch
    - currencyCode
    type: object
  UpdateBaseSalaryResponse:
    properties:
      data:
        $ref: '#/definitions/BaseSalary'
    type: object
  UpdateClientContactInput:
    properties:
      emails:
        items:
          type: string
        type: array
      isMainContact:
        type: boolean
      name:
        type: string
      role:
        type: string
    type: object
  UpdateClientInput:
    properties:
      address:
        type: string
      contacts:
        items:
          $ref: '#/definitions/UpdateClientContactInput'
        type: array
      country:
        type: string
      description:
        type: string
      industry:
        type: string
      name:
        type: string
      registrationNumber:
        type: string
      website:
        type: string
    type: object
  UpdateContactInfoRequest:
    properties:
      accountManagers:
        items:
          $ref: '#/definitions/ProjectHeadRequest'
        type: array
      clientEmail:
        items:
          type: string
        type: array
      deliveryManagers:
        items:
          $ref: '#/definitions/ProjectHeadRequest'
        type: array
      projectEmail:
        type: string
      salePersons:
        items:
          $ref: '#/definitions/ProjectHeadRequest'
        type: array
    type: object
  UpdateEmployeeGeneralInfoRequest:
    properties:
      discordID:
        type: string
      discordName:
        type: string
      displayName:
        type: string
      email:
        type: string
      fullName:
        maxLength: 99
        type: string
      githubID:
        type: string
      joinedDate:
        type: string
      leftDate:
        type: string
      lineManagerID:
        type: string
      linkedInName:
        type: string
      notionEmail:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      organizationIDs:
        items:
          type: string
        type: array
      phone:
        maxLength: 18
        minLength: 9
        type: string
      referredBy:
        type: string
      wiseAccountNumber:
        type: string
      wiseCurrency:
        type: string
      wiseRecipientEmail:
        type: string
      wiseRecipientID:
        type: string
      wiseRecipientName:
        type: string
    required:
    - email
    - fullName
    - phone
    type: object
  UpdateEmployeeStatusResponse:
    properties:
      data:
        $ref: '#/definitions/EmployeeData'
    type: object
  UpdateGeneralEmployeeResponse:
    properties:
      data:
        $ref: '#/definitions/UpdateGeneralInfoEmployeeData'
    type: object
  UpdateGeneralInfoEmployeeData:
    properties:
      createdAt:
        type: string
      discordID:
        type: string
      discordName:
        type: string
      displayName:
        type: string
      fullName:
        description: basic info
        type: string
      githubID:
        type: string
      id:
        type: string
      lineManager:
        $ref: '#/definitions/BasicEmployeeInfo'
      linkedInName:
        type: string
      notionEmail:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      organizations:
        items:
          $ref: '#/definitions/Organization'
        type: array
      phoneNumber:
        type: string
      referredBy:
        $ref: '#/definitions/BasicEmployeeInfo'
      teamEmail:
        type: string
      updatedAt:
        type: string
    type: object
  UpdateInfoInput:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      discordName:
        type: string
      githubID:
        type: string
      lat:
        type: string
      linkedInName:
        type: string
      long:
        type: string
      notionEmail:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      personalEmail:
        type: string
      phoneNumber:
        maxLength: 18
        minLength: 8
        type: string
      placeOfResidence:
        type: string
      wiseAccountNumber:
        type: string
      wiseCurrency:
        type: string
      wiseRecipientEmail:
        type: string
      wiseRecipientID:
        type: string
      wiseRecipientName:
        type: string
    required:
    - city
    - country
    - personalEmail
    - phoneNumber
    - placeOfResidence
    type: object
  UpdateMemberRequest:
    properties:
      deploymentType:
        type: string
      discount:
        type: number
      employeeID:
        type: string
      endDate:
        type: string
      isLead:
        type: boolean
      leadCommissionRate:
        type: number
      note:
        type: string
      positions:
        items:
          type: string
        type: array
      projectMemberID:
        type: string
      projectSlotID:
        type: string
      rate:
        type: number
      seniorityID:
        type: string
      startDate:
        type: string
      status:
        type: string
      upsellCommissionRate:
        type: number
      upsellPersonID:
        type: string
    required:
    - deploymentType
    - positions
    - projectSlotID
    - rate
    - seniorityID
    - status
    type: object
  UpdatePersonalEmployeeData:
    properties:
      address:
        type: string
      birthday:
        type: string
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      gender:
        type: string
      id:
        type: string
      personalEmail:
        type: string
      placeOfResidence:
        type: string
      updatedAt:
        type: string
    type: object
  UpdatePersonalEmployeeResponse:
    properties:
      data:
        $ref: '#/definitions/UpdatePersonalEmployeeData'
    type: object
  UpdatePersonalInfoRequest:
    properties:
      address:
        maxLength: 200
        type: string
      city:
        type: string
      country:
        type: string
      dob:
        type: string
      gender:
        type: string
      personalEmail:
        type: string
      placeOfResidence:
        type: string
    required:
    - address
    - city
    - country
    - dob
    - gender
    - personalEmail
    type: object
  UpdatePositionBody:
    properties:
      code:
        type: string
      name:
        type: string
    type: object
  UpdateProfileInfoData:
    properties:
      address:
        type: string
      city:
        type: string
      country:
        type: string
      createdAt:
        type: string
      discordID:
        type: string
      discordName:
        type: string
      githubID:
        type: string
      id:
        type: string
      linkedInName:
        type: string
      notionEmail:
        type: string
      notionID:
        type: string
      notionName:
        type: string
      phoneNumber:
        type: string
      placeOfResidence:
        type: string
      teamEmail:
        description: basic info
        type: string
      updatedAt:
        type: string
      username:
        type: string
      wiseAccountNumber:
        type: string
      wiseCurrency:
        type: string
      wiseRecipientEmail:
        type: string
      wiseRecipientID:
        type: string
      wiseRecipientName:
        type: string
    type: object
  UpdateProfileInfoResponse:
    properties:
      data:
        $ref: '#/definitions/UpdateProfileInfoData'
    type: object
  UpdateProjectContactInfo:
    properties:
      clientEmail:
        items:
          type: string
        type: array
      projectEmail:
        type: string
      projectHead:
        items:
          $ref: '#/definitions/BasicProjectHeadInfo'
        type: array
    type: object
  UpdateProjectContactInfoResponse:
    properties:
      data:
        $ref: '#/definitions/UpdateProjectContactInfo'
    type: object
  UpdateProjectGeneralInfo:
    properties:
      auditNotionID:
        type: string
      bankAccount:
        $ref: '#/definitions/BasicBankAccountInfo'
      client:
        $ref: '#/definitions/Client'
      country:
        $ref: '#/definitions/BasicCountryInfo'
      function:
        $ref: '#/definitions/ProjectFunction'
      name:
        type: string
      organization:
        $ref: '#/definitions/Organization'
      stacks:
        items:
          $ref: '#/definitions/Stack'
        type: array
      startDate:
        type: string
    type: object
  UpdateProjectGeneralInfoRequest:
    properties:
      accountRating:
        maximum: 5
        minimum: 1
        type: integer
      auditNotionID:
        type: string
      bankAccountID:
        type: string
      clientID:
        type: string
      companyInfoID:
        type: string
      countryID:
        type: string
      deliveryRating:
        maximum: 5
        minimum: 1
        type: integer
      function:
        type: string
      importantLevel:
        type: string
      leadRating:
        maximum: 5
        minimum: 1
        type: integer
      name:
        type: string
      organizationID:
        type: string
      stacks:
        items:
          type: string
        type: array
      startDate:
        type: string
    required:
    - accountRating
    - countryID
    - deliveryRating
    - function
    - importantLevel
    - leadRating
    - name
    type: object
  UpdateProjectGeneralInfoResponse:
    properties:
      data:
        $ref: '#/definitions/UpdateProjectGeneralInfo'
    type: object
  UpdateProjectStatusBody:
    properties:
      status:
        $ref: '#/definitions/ProjectStatus'
    type: object
  UpdateProjectStatusResponse:
    properties:
      data:
        $ref: '#/definitions/UpdatedProject'
    type: object
  UpdateRoleRequest:
    properties:
      roles:
        items:
          type: string
        type: array
    required:
    - roles
    type: object
  UpdateSkillEmployeeData:
    properties:
      chapters:
        items:
          $ref: '#/definitions/Chapter'
        type: array
      createdAt:
        type: string
      id:
        type: string
      positions:
        items:
          $ref: '#/definitions/Position'
        type: array
      seniority:
        $ref: '#/definitions/Seniority'
      stacks:
        items:
          $ref: '#/definitions/Stack'
        type: array
      updatedAt:
        type: string
    type: object
  UpdateSkillsEmployeeResponse:
    properties:
      data:
        $ref: '#/definitions/UpdateSkillEmployeeData'
    type: object
  UpdateSkillsRequest:
    properties:
      chapters:
        items:
          type: string
        type: array
      leadingChapters:
        items:
          type: string
        type: array
      positions:
        items:
          type: string
        type: array
      seniority:
        type: string
      stacks:
        items:
          type: string
        type: array
    required:
    - chapters
    - positions
    - seniority
    - stacks
    type: object
  UpdateStackBody:
    properties:
      avatar:
        type: string
      code:
        type: string
      name:
        type: string
    type: object
  UpdateTopicReviewersBody:
    properties:
      reviewerIDs:
        items:
          type: string
        type: array
    type: object
  UpdateWorkUnitRequest:
    properties:
      members:
        items:
          type: string
        type: array
      name:
        maxLength: 100
        type: string
      stacks:
        items:
          type: string
        type: array
      type:
        $ref: '#/definitions/WorkUnitType'
      url:
        type: string
    required:
    - name
    - stacks
    - type
    type: object
  UpdateWorkingStatusRequest:
    properties:
      employeeStatus:
        $ref: '#/definitions/WorkingStatus'
    type: object
  UpdatedProject:
    properties:
      createdAt:
        type: string
      endDate:
        type: string
      id:
        type: string
      name:
        type: string
      startDate:
        type: string
      status:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  UpsertRollupRequest:
    properties:
      categoryID:
        type: string
      channelID:
        type: string
      discordUserID:
        type: string
      lastMessageID:
        type: string
      messageCount:
        type: integer
      reactionCount:
        type: integer
    required:
    - channelID
    - discordUserID
    - lastMessageID
    type: object
  Valuation:
    properties:
      accountReceivable:
        description: money that company will receive in the future
        properties:
          items:
            items:
              $ref: '#/definitions/AccountingItem'
            type: array
          total:
            type: number
        type: object
      assets:
        description: valuation info
        type: number
      currency:
        type: string
      income:
        description: Total paid invoice, investment & bank interest
        properties:
          detail:
            properties:
              consultantService:
                type: number
              interest:
                type: number
              investment:
                type: number
            type: object
          total:
            type: number
        type: object
      liabilities:
        description: money that company will pay in the future
        properties:
          items:
            items:
              $ref: '#/definitions/AccountingItem'
            type: array
          total:
            type: number
        type: object
      outcome:
        description: Sum of Expenses and payroll
        properties:
          detail:
            properties:
              expense:
                type: number
              investment:
                type: number
              payroll:
                type: number
            type: object
          total:
            type: number
        type: object
      rate:
        type: number
      year:
        description: basic info
        type: string
    type: object
  WorkSurvey:
    properties:
      deadline:
        type: number
      endDate:
        type: string
      learning:
        type: number
      trend:
        $ref: '#/definitions/Trend'
      workload:
        type: number
    type: object
  WorkSurveyResponse:
    properties:
      data:
        $ref: '#/definitions/WorkSurveysData'
    type: object
  WorkSurveySummary:
    properties:
      data:
        items:
          $ref: '#/definitions/WorkSurveySummaryEmployee'
        type: array
      dates:
        items:
          type: string
        type: array
      type:
        type: string
    type: object
  WorkSurveySummaryAnswer:
    properties:
      answer:
        type: string
      project:
        $ref: '#/definitions/BasicProjectInfo'
    type: object
  WorkSurveySummaryEmployee:
    properties:
      listAnswers:
        items:
          $ref: '#/definitions/WorkSurveySummaryListAnswer'
        type: array
      reviewer:
        $ref: '#/definitions/BasicEmployeeInfo'
    type: object
  WorkSurveySummaryListAnswer:
    properties:
      answers:
        items:
          $ref: '#/definitions/WorkSurveySummaryAnswer'
        type: array
      date:
        type: string
    type: object
  WorkSurveySummaryResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/WorkSurveySummary'
        type: array
      page:
        description: page index
        type: integer
      size:
        description: page size
        type: integer
      total:
        type: integer
    type: object
  WorkSurveysData:
    properties:
      project:
        $ref: '#/definitions/BasicProjectInfo'
      workSurveys:
        items:
          $ref: '#/definitions/WorkSurvey'
        type: array
    type: object
  WorkUnit:
    properties:
      code:
        type: string
      id:
        type: string
      members:
        items:
          $ref: '#/definitions/BasicMember'
        type: array
      name:
        type: string
      projectID:
        type: string
      stacks:
        items:
          $ref: '#/definitions/Stack'
        type: array
      status:
        type: string
      type:
        type: string
      url:
        type: string
    type: object
  WorkUnitDistribution:
    properties:
      development:
        $ref: '#/definitions/WorkUnitDistributionDevelopment'
      employee:
        $ref: '#/definitions/BasicEmployeeInfo'
      learning:
        $ref: '#/definitions/WorkUnitDistributionLearning'
      management:
        $ref: '#/definitions/WorkUnitDistributionManagement'
      training:
        $ref: '#/definitions/WorkUnitDistributionTraining'
    type: object
  WorkUnitDistributionData:
    properties:
      workUnitDistributions:
        items:
          $ref: '#/definitions/WorkUnitDistribution'
        type: array
    type: object
  WorkUnitDistributionDevelopment:
    properties:
      total:
        type: integer
      workUnits:
        items:
          $ref: '#/definitions/WorkUnitDistributionWU'
        type: array
    type: object
  WorkUnitDistributionLearning:
    properties:
      total:
        type: integer
      workUnits:
        items:
          $ref: '#/definitions/WorkUnitDistributionWU'
        type: array
    type: object
  WorkUnitDistributionManagement:
    properties:
      projectHeads:
        items:
          $ref: '#/definitions/WorkUnitDistributionWUProjectHead'
        type: array
      total:
        type: integer
      workUnits:
        items:
          $ref: '#/definitions/WorkUnitDistributionWU'
        type: array
    type: object
  WorkUnitDistributionTraining:
    properties:
      mentees:
        items:
          $ref: '#/definitions/BasicEmployeeInfo'
        type: array
      total:
        type: integer
      workUnits:
        items:
          $ref: '#/definitions/WorkUnitDistributionWU'
        type: array
    type: object
  WorkUnitDistributionWU:
    properties:
      project:
        $ref: '#/definitions/BasicProjectInfo'
      workUnitName:
        type: string
    type: object
  WorkUnitDistributionWUProjectHead:
    properties:
      position:
        type: string
      project:
        $ref: '#/definitions/BasicProjectInfo'
    type: object
  WorkUnitDistributionsResponse:
    properties:
      data:
        $ref: '#/definitions/WorkUnitDistributionData'
    type: object
  WorkUnitResponse:
    properties:
      data:
        $ref: '#/definitions/WorkUnit'
    type: object
  WorkUnitType:
    enum:
    - development
    - management
    - training
    - learning
    type: string
    x-enum-varnames:
    - WorkUnitTypeDevelopment
    - WorkUnitTypeManagement
    - WorkUnitTypeTraining
    - WorkUnitTypeLearning
  WorkingStatus:
    enum:
    - on-boarding
    - left
    - probation
    - full-time
    - contractor
    type: string
    x-enum-varnames:
    - WorkingStatusOnBoarding
    - WorkingStatusLeft
    - WorkingStatusProbation
    - WorkingStatusFullTime
    - WorkingStatusContractor
  github_com_dwarvesf_fortress-api_pkg_model.SortOrder:
    enum:
    - asc
    - desc
    type: string
    x-enum-varnames:
    - SortOrderASC
    - SortOrderDESC
  github_com_dwarvesf_fortress-api_pkg_view.Earn:
    properties:
      bounty:
        type: string
      function:
        type: string
      pics:
        items:
          type: string
        type: array
      status:
        type: string
      title:
        type: string
      url:
        type: string
    type: object
  github_com_dwarvesf_fortress-api_pkg_view.GetListCompanyInfoResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/CompanyInfo'
        type: array
    type: object
  pkg_view.DiscordResearchTopic:
    properties:
      msgCount:
        type: integer
      name:
        type: string
      sortedActiveUsers:
        items:
          $ref: '#/definitions/pkg_view.DiscordTopicActiveUser'
        type: array
      url:
        type: string
    type: object
  pkg_view.DiscordTopicActiveUser:
    properties:
      msgCount:
        type: integer
      userID:
        type: string
    type: object
  pkg_view.attribute:
    properties:
      trait_type:
        type: string
      value:
        type: string
    type: object
info:
  contact:
    email: benjamin@d.foundation
    name: Nam Nguyen
    url: https://d.foundation
  description: This is api document for fortress project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: FORTRESS API DOCUMENT
  version: v0.1.39
paths:
  /assets/upload:
    post:
      consumes:
      - application/json
      description: Upload the content
      operationId: upload
      parameters:
      - description: content upload
        in: formData
        name: file
        required: true
        type: file
      - description: image/doc
        in: formData
        name: type
        required: true
        type: string
      - description: employees/projects/change-logs/invoices
        in: formData
        name: targetType
        required: true
        type: string
      - description: employeeID/projectID
        in: formData
        name: targetID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ContentDataResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload the content
      tags:
      - Asset
  /auth:
    post:
      consumes:
      - application/json
      description: Authorize user when login
      operationId: auth
      parameters:
      - description: Google login code
        in: body
        name: code
        required: true
        schema:
          type: string
      - description: Google redirect url
        in: body
        name: redirectUrl
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Authorize user when login
      tags:
      - Auth
  /auth/api-key:
    post:
      consumes:
      - application/json
      description: Create API key
      operationId: createApiKey
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/APIKeyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create API key
      tags:
      - Auth
  /auth/me:
    get:
      consumes:
      - application/json
      description: Get logged-in user data
      operationId: me
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuthUserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get logged-in user data
      tags:
      - Auth
  /bank-accounts:
    get:
      consumes:
      - application/json
      description: Get all bank accounts
      operationId: listBankAccounts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListBankAccountResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all bank accounts
      tags:
      - Bank
  /banks:
    get:
      consumes:
      - application/json
      description: Get all bank by given filter params
      operationId: getBanksList
      parameters:
      - description: Bank ID
        in: query
        name: id
        type: string
      - description: Bin
        in: query
        name: bin
        type: string
      - description: Swift SwiftCode
        in: query
        name: swiftCode
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListBankResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all banks
      tags:
      - Metadata
  /brainery-logs:
    post:
      consumes:
      - application/json
      description: Create brainery logs
      operationId: createBraineryLog
      parameters:
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateBraineryLogRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create brainery logs
      tags:
      - Project
  /brainery-logs/metrics:
    get:
      consumes:
      - application/json
      description: Get brainery metric
      operationId: getBraineryMetric
      parameters:
      - description: Time view
        in: query
        name: view
        type: string
      - description: Date
        format: date
        in: query
        name: date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/BraineryMetricResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get brainery metric
      tags:
      - Project
  /clients:
    get:
      consumes:
      - application/json
      description: Get all clients
      operationId: getListClients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetListClientResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all clients
      tags:
      - Client
    post:
      consumes:
      - application/json
      description: Create new client
      operationId: createClient
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/CreateClientRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CreateClientResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new client
      tags:
      - Client
  /clients/{id}:
    delete:
      consumes:
      - application/json
      description: Delete client by id
      operationId: deleteClient
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Delete client by id
      tags:
      - Client
    get:
      consumes:
      - application/json
      description: Get client detail by id
      operationId: getClientDetail
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetDetailClientResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get client detail by id
      tags:
      - Client
    put:
      consumes:
      - application/json
      description: Update client by id
      operationId: updateClient
      parameters:
      - description: Client ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateClientInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update client by id
      tags:
      - Client
  /community-nfts/{id}:
    get:
      consumes:
      - application/json
      description: Get metadata of a nft
      operationId: getNftMetadata
      parameters:
      - description: NFT ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetNftMetadataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get metadata of a nft
      tags:
      - CommunityNft
  /company-infos:
    get:
      consumes:
      - application/json
      description: Get all company info
      operationId: get list of company info
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/github_com_dwarvesf_fortress-api_pkg_view.GetListCompanyInfoResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all company info
      tags:
      - Client
  /cron-jobs/store-vault-transaction:
    post:
      consumes:
      - application/json
      description: Store vault tx as icy tx from Mochi service
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Store vault tx as icy tx from Mochi service
      tags:
      - Vault
  /cron-jobs/sync-project-member-status:
    post:
      consumes:
      - application/json
      description: Sync project member status
      operationId: syncProjectMemberStatus
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Sync project member status
      tags:
      - Project
  /cronjobs/audits:
    post:
      consumes:
      - application/json
      description: Sync audit info from Notion to database
      operationId: syncAudit
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
      security:
      - BearerAuth: []
      summary: Sync audit info from Notion to database
      tags:
      - Audit
  /cronjobs/index-engagement-messages:
    post:
      consumes:
      - application/json
      description: Index messages of provided Discord server
      operationId: indexEngagementMessages
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Index messages of provided Discord server
      tags:
      - Engagement
  /dashboards/engagement/detail:
    get:
      consumes:
      - application/json
      description: Get engagement dashboard
      operationId: getEngagementInfoDetailList
      parameters:
      - description: chapter/seniority/project
        in: query
        name: filter
        required: true
        type: string
      - description: startDate
        in: query
        name: startDate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetEngagementDashboardDetailResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get engagement dashboard
      tags:
      - Dashboard
  /dashboards/engagement/info:
    get:
      consumes:
      - application/json
      description: Get engagement dashboard
      operationId: getEngagementInfo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetEngagementDashboardResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get engagement dashboard
      tags:
      - Dashboard
  /dashboards/projects/action-item-squash:
    get:
      consumes:
      - application/json
      description: Get Action items squash report for dashboard
      operationId: getActionItemSquashReportList
      parameters:
      - description: Project ID
        in: query
        name: projectID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ActionItemSquashReportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Action items squash report for dashboard
      tags:
      - Dashboard
  /dashboards/projects/action-items:
    get:
      consumes:
      - application/json
      description: Get Action items report for dashboard
      operationId: getActionItemReportList
      parameters:
      - description: Project ID
        in: query
        name: projectID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ActionItemReportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Action items report for dashboard
      tags:
      - Dashboard
  /dashboards/projects/audits:
    get:
      consumes:
      - application/json
      description: Get Audit information for dashboard
      operationId: getAuditList
      parameters:
      - description: Project ID
        in: query
        name: projectID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuditResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Audit information for dashboard
      tags:
      - Dashboard
  /dashboards/projects/engineering-healths:
    get:
      consumes:
      - application/json
      description: Get Engineering health information for dashboard
      operationId: getEngineeringHealth
      parameters:
      - description: Project ID
        in: query
        name: projectID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EngineeringHealthResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Engineering health information for dashboard
      tags:
      - Dashboard
  /dashboards/projects/sizes:
    get:
      consumes:
      - application/json
      description: Get the total number of active member in each project
      operationId: getProjectSizeList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectSizeResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the total number of active member in each project
      tags:
      - Dashboard
  /dashboards/projects/summary:
    get:
      consumes:
      - application/json
      description: Get the summary audit info for projects
      operationId: getProjectSummary
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/AuditSummariesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the summary audit info for projects
      tags:
      - Dashboard
  /dashboards/projects/work-surveys:
    get:
      consumes:
      - application/json
      description: Get Work Surveys data for dashboard
      operationId: getWorkSurveyList
      parameters:
      - description: Project ID
        in: query
        name: projectID
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WorkSurveyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get Work Surveys data for dashboard
      tags:
      - Dashboard
  /dashboards/resources/availabilities:
    get:
      consumes:
      - application/json
      description: Get resources availability
      operationId: getResourcesAvailability
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ResourceAvailabilityResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get resources availability
      tags:
      - Dashboard
  /dashboards/resources/utilization:
    get:
      consumes:
      - application/json
      description: Get dashboard resource utilization
      operationId: getResourceUtilizationList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetDashboardResourceUtilizationResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get dashboard resource utilization
      tags:
      - Dashboard
  /dashboards/resources/work-survey-summaries:
    get:
      consumes:
      - application/json
      description: Get resource work summaries for dashboard
      operationId: getResourceWorkSurveySummaryList
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WorkSurveySummaryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get resource work summaries for dashboard
      tags:
      - Dashboard
  /dashboards/resources/work-unit-distribution:
    get:
      consumes:
      - application/json
      description: Get work unit distribution data for dashboard
      operationId: getWorkUnitDistributionList
      parameters:
      - description: employee name for filter
        in: query
        name: name
        type: string
      - description: sort required
        in: query
        name: sort
        type: string
      - description: work unit type for filter
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WorkUnitDistributionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get work unit distribution data for dashboard
      tags:
      - Dashboard
  /dashboards/resources/work-unit-distribution-summary:
    get:
      consumes:
      - application/json
      description: Get summary for workunit distribution dashboard
      operationId: getWorkUnitDistributionSummary
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SummaryWorkUnitDistributionResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get summary for workunit distribution dashboard
      tags:
      - Dashboard
  /discords/{discord_id}/earns/total:
    get:
      consumes:
      - application/json
      description: Get total earn of employee
      operationId: GetEmployeeTotalEarn
      parameters:
      - description: Employee Discord ID
        in: path
        name: discord_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetEmployeeTotalEarnResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get total earn of employee
      tags:
      - Employee
  /discords/{discord_id}/earns/transactions:
    get:
      consumes:
      - application/json
      description: List earn transactions of employee
      operationId: GetEmployeeEarnTransactions
      parameters:
      - description: Employee Discord ID
        in: path
        name: discord_id
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetEmployeeEarnTransactionsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: List earn transactions of employee
      tags:
      - Employee
  /discords/research-topics:
    get:
      consumes:
      - application/json
      description: Get list of research topics on discord
      operationId: ListDiscordResearchTopics
      parameters:
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListResearchTopicResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list of research topics on discord
      tags:
      - Discord
  /discords/salary-advance-report:
    get:
      consumes:
      - application/json
      description: List salary advance aggregated by employee
      operationId: SalaryAdvanceReport
      parameters:
      - description: Get List Aggregated Salary Advance Request
        in: body
        name: SalaryAdvanceReportRequest
        required: true
        schema:
          $ref: '#/definitions/SalaryAdvanceReportRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SalaryAdvanceReportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: List salary advance aggregated by employee
      tags:
      - Employee
  /earn:
    get:
      consumes:
      - application/json
      description: List of earns from memo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListEarnResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: List of earns from memo
      tags:
      - Earn
  /employees:
    post:
      consumes:
      - application/json
      description: Create new employee
      operationId: createEmployee
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/CreateEmployeeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new employee
      tags:
      - Employee
  /employees/{id}:
    get:
      consumes:
      - application/json
      description: Get employee by id
      operationId: getEmployeeDetails
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get employee by id
      tags:
      - Employee
  /employees/{id}/base-salary:
    put:
      consumes:
      - application/json
      description: Update employee's base salary by employee and base salary id
      operationId: updateBaseSalary
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateBaseSalaryRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateBaseSalaryResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update employee's base salary by employee and base salary id
      tags:
      - Employee
  /employees/{id}/employee-status:
    put:
      consumes:
      - application/json
      description: Update account status by employee id
      operationId: updateEmployeeStatus
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Status
        in: body
        name: employeeStatus
        required: true
        schema:
          $ref: '#/definitions/UpdateWorkingStatusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateEmployeeStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update account status by employee id
      tags:
      - Employee
  /employees/{id}/general-info:
    put:
      consumes:
      - application/json
      description: Update general info of the employee by id
      operationId: updateGeneralInfo
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateEmployeeGeneralInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateGeneralEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update general info of the employee by id
      tags:
      - Employee
  /employees/{id}/personal-info:
    put:
      consumes:
      - application/json
      description: Update personal info of the employee by id
      operationId: updatePersonalInfo
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdatePersonalInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdatePersonalEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update personal info of the employee by id
      tags:
      - Employee
  /employees/{id}/roles:
    put:
      consumes:
      - application/json
      description: Update role by employee id
      operationId: updateRole
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update role by employee id
      tags:
      - Employee
  /employees/{id}/skills:
    put:
      consumes:
      - application/json
      description: Update Skill for employee by id
      operationId: updateSkill
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateSkillsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateSkillsEmployeeResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update Skill for employee by id
      tags:
      - Employee
  /employees/{id}/upload-avatar:
    post:
      consumes:
      - application/json
      description: Upload avatar of employee by id
      operationId: uploadAvatar
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: avatar upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeContentDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload avatar of employee by id
      tags:
      - Employee
  /employees/advance-salary:
    post:
      consumes:
      - application/json
      description: Salary advance by discord id
      operationId: salaryAdvance
      parameters:
      - description: Salary Advance Request
        in: body
        name: salaryAdvanceRequest
        required: true
        schema:
          $ref: '#/definitions/SalaryAdvanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SalaryAdvanceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Salary advance by discord id
      tags:
      - Employee
  /employees/check-advance-salary:
    post:
      consumes:
      - application/json
      description: Check salary advance by discord id
      operationId: checkSalaryAdvance
      parameters:
      - description: Check Salary Advance Request
        in: body
        name: checkSalaryAdvanceRequest
        required: true
        schema:
          $ref: '#/definitions/SalaryAdvanceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CheckSalaryAdvanceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Check salary advance by discord id
      tags:
      - Employee
  /employees/search:
    post:
      consumes:
      - application/json
      description: Get the list of employees with pagination and workingStatus
      operationId: getEmployeeList
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/GetListEmployeeQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeListDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the list of employees
      tags:
      - Employee
  /engagements/channel/:channel-id/last-message-id:
    get:
      consumes:
      - application/json
      description: Get local last message ID of a channel
      operationId: getLastMessageID
      parameters:
      - description: Discord Channel ID
        in: path
        name: channel-id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get local last message ID of a channel
      tags:
      - Engagement
  /engagements/rollup:
    post:
      consumes:
      - application/json
      description: Upsert engagement rollup
      operationId: upsertEngagementRollup
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpsertRollupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upsert engagement rollup
      tags:
      - Engagement
  /feedbacks:
    get:
      consumes:
      - application/json
      description: Get list feedbacks
      operationId: getFeedbackList
      parameters:
      - description: Status
        in: query
        name: status
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      - description: Sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListFeedbackResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get list feedbacks
      tags:
      - Feedback
  /feedbacks/{id}/topics/{topicID}:
    get:
      consumes:
      - application/json
      description: Get feedback detail for logged-in users
      operationId: getFeedbackDetail
      parameters:
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Event Topic ID
        in: path
        name: topicID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FeedbackDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get feedback detail for logged-in users
      tags:
      - Feedback
  /feedbacks/{id}/topics/{topicID}/submit:
    post:
      consumes:
      - application/json
      description: Submit the draft or done answers
      operationId: submitFeedback
      parameters:
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Event Topic ID
        in: path
        name: topicID
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/SubmitFeedbackRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SubmitFeedbackResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Submit the draft or done answers
      tags:
      - Feedback
  /feedbacks/unreads:
    get:
      consumes:
      - application/json
      description: Get number of unread inbox for user
      operationId: countUnreadFeedback
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UnreadFeedbackCountResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get number of unread inbox for user
      tags:
      - Feedback
  /invite:
    get:
      consumes:
      - application/json
      description: Submit Get invitation state based on token
      operationId: getInvitation
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeInvitationResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get invitation state based on token
      tags:
      - Onboarding
  /invite/submit:
    put:
      consumes:
      - application/json
      description: Submit Onboarding form
      operationId: submitOnboardingForm
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/SubmitOnboardingFormRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Submit onboarding form
      tags:
      - Onboarding
  /invoices:
    get:
      consumes:
      - application/json
      description: Get latest invoice by project id
      operationId: getInvoiceList
      parameters:
      - description: projectID
        in: query
        name: projectID
        type: string
      - description: status
        in: query
        name: status
        type: string
      - description: page
        in: query
        name: page
        type: integer
      - description: size
        in: query
        name: size
        type: integer
      - description: sort
        in: query
        name: sort
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/InvoiceListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get latest invoice by project id
      tags:
      - Invoice
  /invoices/{id}/status:
    put:
      consumes:
      - application/json
      description: Update status for invoice
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update status for invoice
      tags:
      - Invoice
  /invoices/send:
    post:
      consumes:
      - application/json
      description: Create new invoice and send to client
      operationId: sendInvoice
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/SendInvoiceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new invoice and send to client
      tags:
      - Invoice
  /invoices/template:
    get:
      consumes:
      - application/json
      description: Get the latest invoice by project id
      operationId: getInvoiceTemplate
      parameters:
      - description: projectID
        in: query
        name: projectID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/InvoiceTemplateResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the latest invoice by project id
      tags:
      - Invoice
  /line-managers:
    get:
      consumes:
      - application/json
      description: Get the list of line managers
      operationId: getLineManagerList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/LineManagersResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get the list of line managers
      tags:
      - Employee
  /metadata/chapters:
    get:
      consumes:
      - application/json
      description: Get list values for chapters
      operationId: getChaptersList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ChapterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list values for chapters
      tags:
      - Metadata
  /metadata/countries:
    get:
      consumes:
      - application/json
      description: Get all countries
      operationId: getCountriesList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CountriesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get all countries
      tags:
      - Metadata
  /metadata/countries/{country_id}/cities:
    get:
      consumes:
      - application/json
      description: Get list cities by country
      operationId: getCitiesList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CitiesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list cities by country
      tags:
      - Metadata
  /metadata/currencies:
    get:
      consumes:
      - application/json
      description: Get list currencies
      operationId: getCurrenciesList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetCurrenciesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list currencies
      tags:
      - Metadata
  /metadata/organizations:
    get:
      consumes:
      - application/json
      description: Get list values for organizations
      operationId: getOrganizationsList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/OrganizationsResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list values for organizations
      tags:
      - Metadata
  /metadata/positions:
    get:
      consumes:
      - application/json
      description: Get list values for positions
      operationId: getPositionsList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PositionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list values for positions
      tags:
      - Metadata
    post:
      consumes:
      - application/json
      description: Create new position
      operationId: createPosition
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/CreatePositionInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new position
      tags:
      - Metadata
  /metadata/positions/{id}:
    delete:
      consumes:
      - application/json
      description: Delete position by ID
      operationId: deletePosition
      parameters:
      - description: Position ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete position by ID
      tags:
      - Metadata
    put:
      consumes:
      - application/json
      description: Update position information by ID
      operationId: updatePosition
      parameters:
      - description: Position ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdatePositionBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update position information by ID
      tags:
      - Metadata
  /metadata/project-statuses:
    get:
      consumes:
      - application/json
      description: Get list values for project statuses
      operationId: getProjectStatusesList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MetaDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list values for project statuses
      tags:
      - Metadata
  /metadata/questions:
    get:
      consumes:
      - application/json
      description: Get list question by category and subcategory
      operationId: getQuestionsList
      parameters:
      - description: Category
        enum:
        - feedback
        - survey
        in: query
        name: category
        required: true
        type: string
      - description: Subcategory
        enum:
        - peer-review
        - engagement
        - work
        - appreciation
        - comment
        in: query
        name: subcategory
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/GetQuestionResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list question by category and subcategory
      tags:
      - Metadata
  /metadata/roles:
    get:
      consumes:
      - application/json
      description: Get list roles
      operationId: getRolesList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/RolesResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list roles
      tags:
      - Metadata
  /metadata/seniorities:
    get:
      consumes:
      - application/json
      description: Get list values for sentitorities
      operationId: getSenioritiesList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SeniorityResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list values for sentitorities
      tags:
      - Metadata
  /metadata/stacks:
    get:
      consumes:
      - application/json
      description: Get list values for stacks
      operationId: getStacksList
      parameters:
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/StackResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list values for stacks
      tags:
      - Metadata
    post:
      consumes:
      - application/json
      description: Create new stack
      operationId: createStack
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/CreateStackInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new stack
      tags:
      - Metadata
  /metadata/stacks/{id}:
    delete:
      consumes:
      - application/json
      description: Delete stack by ID
      operationId: deleteStack
      parameters:
      - description: Stack ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete stack by ID
      tags:
      - Metadata
    put:
      consumes:
      - application/json
      description: Update stack information by ID
      operationId: updateStack
      parameters:
      - description: Stack ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateStackBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update stack information by ID
      tags:
      - Metadata
  /metadata/working-status:
    get:
      consumes:
      - application/json
      description: Get list values for working status
      operationId: getWorkingStatusList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MetaDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list values for working status
      tags:
      - Metadata
  /notion/audiences:
    get:
      consumes:
      - application/json
      description: Get list audiences from DF Audience
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list audiences from DF Audience
      tags:
      - Notion
  /notion/changelogs/project:
    post:
      consumes:
      - application/json
      description: send project changelog
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: send project changelog
      tags:
      - Notion
  /notion/changelogs/projects/available:
    get:
      consumes:
      - application/json
      description: get available projects changelog
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: get available projects changelog
      tags:
      - Notion
  /notion/df-updates/{id}/send:
    post:
      consumes:
      - application/json
      description: send project changelog
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: send project changelog
      tags:
      - Notion
  /notion/digests:
    get:
      consumes:
      - application/json
      description: Get list digests from DF Internal Digest
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list digests from DF Internal Digest
      tags:
      - Notion
  /notion/earns:
    get:
      consumes:
      - application/json
      description: Get list items from DF earn
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list items from DF earn
      tags:
      - Notion
  /notion/events:
    get:
      consumes:
      - application/json
      description: Get list events from DF Dwarves Community Events
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list events from DF Dwarves Community Events
      tags:
      - Notion
  /notion/hiring-positions:
    get:
      consumes:
      - application/json
      description: Get list hiring from DF Dwarves Hiring
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list hiring from DF Dwarves Hiring
      tags:
      - Notion
  /notion/issues:
    get:
      consumes:
      - application/json
      description: Get list issues from DF Issues & Resolution Log
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list issues from DF Issues & Resolution Log
      tags:
      - Notion
  /notion/memos:
    get:
      consumes:
      - application/json
      description: Get list memos from DF Memos
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list memos from DF Memos
      tags:
      - Notion
  /notion/projects/milestones:
    get:
      consumes:
      - application/json
      description: Get list  project milestones
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list  project milestones
      tags:
      - Notion
  /notion/staffing-demands:
    get:
      consumes:
      - application/json
      description: Get list  staffing demands from DF Staffing Demand
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list  staffing demands from DF Staffing Demand
      tags:
      - Notion
  /notion/tech-radars:
    get:
      consumes:
      - application/json
      description: Get list items from DF TechRadar
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list items from DF TechRadar
      tags:
      - Notion
  /notion/update:
    get:
      consumes:
      - application/json
      description: Get list updates from DF Updates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get list updates from DF Updates
      tags:
      - Notion
  /profile:
    get:
      consumes:
      - application/json
      description: Get profile information of employee
      operationId: getPofile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProfileDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get profile information of employee
      tags:
      - Profile
    put:
      consumes:
      - application/json
      description: Update profile info by id
      operationId: updateProfileInfo
      parameters:
      - description: Employee ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateInfoInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateProfileInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update profile info by id
      tags:
      - Profile
  /profile/upload:
    post:
      consumes:
      - application/json
      description: Upload image  by id
      operationId: uploadImage
      parameters:
      - description: content upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeContentDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload image  by id
      tags:
      - Profile
  /profile/upload-avatar:
    post:
      consumes:
      - application/json
      description: Upload avatar  by id
      operationId: uploadProfileAvatar
      parameters:
      - description: content upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeContentDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload avatar  by id
      tags:
      - Profile
  /project/{id}/members/{memberID}:
    delete:
      consumes:
      - application/json
      description: Delete member in a project
      operationId: deleteProjectMember
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Project Member ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete member in a project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Unassign member in a project
      operationId: unassignProjectMember
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee ID
        in: path
        name: memberID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Unassign member in a project
      tags:
      - Project
  /project/{id}/slot/{slotID}:
    delete:
      consumes:
      - application/json
      description: Delete slot in a project
      operationId: deleteProjectSlot
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Slot ID
        in: path
        name: slotID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete slot in a project
      tags:
      - Project
  /projects:
    get:
      consumes:
      - application/json
      description: Get list of project
      operationId: getProjectList
      parameters:
      - collectionFormat: csv
        description: Project status
        in: query
        items:
          type: string
        name: status
        type: array
      - description: Project name
        in: query
        name: name
        type: string
      - description: Project type
        in: query
        name: type
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectListDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get list of project
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Create new project
      operationId: createProject
      parameters:
      - description: body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/CreateProjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CreateProjectRestponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new project
      tags:
      - Project
  /projects/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a project
      operationId: getProjectDetails
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get details of a project
      tags:
      - Project
  /projects/{id}/contact-info:
    put:
      consumes:
      - application/json
      description: Update contact info of the project by id
      operationId: updateProjectContactInfo
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateContactInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateProjectContactInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update contact info of the project by id
      tags:
      - Project
  /projects/{id}/general-info:
    put:
      consumes:
      - application/json
      description: Update general info of the project by id
      operationId: updateProjectGeneralInfo
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateProjectGeneralInfoRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateProjectGeneralInfoResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update general info of the project by id
      tags:
      - Project
  /projects/{id}/members:
    get:
      consumes:
      - application/json
      description: Get list members of project
      operationId: getProjectMemberList
      parameters:
      - description: Project ID
        in: path
        name: id
        type: string
      - description: Status
        in: query
        name: status
        type: string
      - description: Preload data with default value is true
        in: query
        name: preload
        type: boolean
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      - description: Sort
        in: query
        name: sort
        type: string
      - description: Distinct
        in: query
        name: distinct
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectMemberListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get list members of project
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Assign member in an existing project
      operationId: assignProjectMember
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/AssignMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CreateMemberDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign member into an existing project
      tags:
      - Project
    put:
      consumes:
      - application/json
      description: Update member in an existing project
      operationId: updateProjectMember
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateMemberRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/CreateMemberDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update member in an existing project
      tags:
      - Project
  /projects/{id}/sending-survey-state:
    put:
      consumes:
      - application/json
      description: Update allows sending survey for project by id
      operationId: updateProjectSendingSurveyState
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Allows sending survey
        in: query
        name: allowsSendingSurvey
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update allows sending survey for project by id
      tags:
      - Project
  /projects/{id}/status:
    put:
      consumes:
      - application/json
      description: Update status for project by id
      operationId: updateProjectStatus
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Project Status
        in: body
        name: status
        required: true
        schema:
          $ref: '#/definitions/UpdateProjectStatusBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/UpdateProjectStatusResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update status for project by id
      tags:
      - Project
  /projects/{id}/upload-avatar:
    post:
      consumes:
      - application/json
      description: Upload avatar of project by id
      operationId: uploadProjectAvatar
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: avatar upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ProjectContentDataResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Upload avatar of project by id
      tags:
      - Project
  /projects/{id}/work-units:
    get:
      consumes:
      - application/json
      description: Get list work units of a project
      operationId: getProjectWorkUnitList
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: status
        enum:
        - active
        - archived
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListWorkUnitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get list work units of a project
      tags:
      - Project
    post:
      consumes:
      - application/json
      description: Get work unit of a project
      operationId: createProjectWorkUnit
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/CreateWorkUnitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WorkUnitResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create work unit of a project
      tags:
      - Project
  /projects/{id}/work-units/{workUnitID}:
    put:
      consumes:
      - application/json
      description: Update work unit info
      operationId: updateProjectWorkUnit
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Unit ID
        in: path
        name: workUnitID
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateWorkUnitRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update work unit info
      tags:
      - Project
  /projects/{id}/work-units/{workUnitID}/archive:
    put:
      consumes:
      - application/json
      description: Archive an active work unit of a project
      operationId: archiveProjectWorkUnit
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Unit ID
        in: path
        name: workUnitID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Archive an active work unit of a project
      tags:
      - Project
  /projects/{id}/work-units/{workUnitID}/unarchive:
    put:
      consumes:
      - application/json
      description: Unarchive an archive work unit of a project
      operationId: unarchiveProjectWorkUnit
      parameters:
      - description: Project ID
        in: path
        name: id
        required: true
        type: string
      - description: Work Unit ID
        in: path
        name: workUnitID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Unarchive an archive work unit of a project
      tags:
      - Project
  /public/clients:
    get:
      consumes:
      - application/json
      description: Get all clients
      operationId: getAllPublicClients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/PublicClientListResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all clients
      tags:
      - Public
  /public/employees:
    get:
      consumes:
      - application/json
      description: Get public employees list
      operationId: getPublicEmployeeList
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/EmployeeLocationListResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      summary: Get public employees list
      tags:
      - Public
  /surveys:
    get:
      consumes:
      - application/json
      description: Get list event
      operationId: ListSurvey
      parameters:
      - description: Event Subtype
        in: query
        name: subtype
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      - description: Sort
        in: query
        name: sort
        type: string
      - description: Event Subtype
        in: query
        name: subtype
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListSurveyResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get list event
      tags:
      - Survey
    post:
      consumes:
      - application/json
      description: Create new survey
      operationId: CreateSurvey
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/CreateSurveyFeedbackInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create new survey
      tags:
      - Survey
  /surveys/{id}:
    delete:
      consumes:
      - application/json
      description: Delete survey by id
      operationId: DeleteSurvey
      parameters:
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete survey by id
      tags:
      - Survey
    get:
      consumes:
      - application/json
      description: Get survey detail
      operationId: GetSurveyDetail
      parameters:
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: string
      - description: Size
        in: query
        name: size
        type: string
      - description: Keyword
        in: query
        name: keyword
        type: string
      - description: Status
        in: query
        name: status
        type: string
      - collectionFormat: csv
        description: Projects
        in: query
        items:
          type: string
        name: projects
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ListSurveyDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get survey detail
      tags:
      - Survey
  /surveys/{id}/done:
    put:
      consumes:
      - application/json
      description: Mark done feedback event
      operationId: MarkDone
      parameters:
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Mark done feedback event
      tags:
      - Survey
  /surveys/{id}/send:
    post:
      consumes:
      - application/json
      description: Send the survey
      operationId: SendSurvey
      parameters:
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/SendSurveyInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Send the survey
      tags:
      - Survey
  /surveys/{id}/topics/{topicID}:
    delete:
      consumes:
      - application/json
      description: delete survey topic
      operationId: DeleteSurveyTopic
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: delete survey topic
      tags:
      - Survey
    get:
      consumes:
      - application/json
      description: Get detail for peer review
      operationId: GetSurveyTopicDetail
      parameters:
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Event Topic ID
        in: path
        name: topicID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SurveyTopicDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get detail for peer review
      tags:
      - Survey
  /surveys/{id}/topics/{topicID}/employees:
    delete:
      consumes:
      - application/json
      description: Delete reviewers in a topic
      operationId: DeleteTopicReviewers
      parameters:
      - description: Feedback Event ID
        in: path
        name: id
        required: true
        type: string
      - description: Employee Event Topic ID
        in: path
        name: topicID
        required: true
        type: string
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/DeleteTopicReviewersBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete reviewers in a topic
      tags:
      - Survey
    put:
      consumes:
      - application/json
      description: Update reviewers in a topic
      operationId: UpdateTopicReviewers
      parameters:
      - description: Body
        in: body
        name: Body
        required: true
        schema:
          $ref: '#/definitions/UpdateTopicReviewersBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update reviewers in a topic
      tags:
      - Survey
  /surveys/{id}/topics/{topicID}/reviews/{reviewID}:
    get:
      consumes:
      - application/json
      description: Get survey review detail
      operationId: GetSurveyReviewDetail
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/FeedbackReviewDetailResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get survey review detail
      tags:
      - Survey
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
